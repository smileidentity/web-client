(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // ../../node_modules/validate.js/validate.js
  var require_validate = __commonJS({
    "../../node_modules/validate.js/validate.js"(exports, module) {
      (function(exports2, module2, define2) {
        "use strict";
        var validate3 = function(attributes, constraints, options) {
          options = v.extend({}, v.options, options);
          var results = v.runValidations(attributes, constraints, options), attr, validator;
          if (results.some(function(r) {
            return v.isPromise(r.error);
          })) {
            throw new Error("Use validate.async if you want support for promises");
          }
          return validate3.processValidationResults(results, options);
        };
        var v = validate3;
        v.extend = function(obj) {
          [].slice.call(arguments, 1).forEach(function(source) {
            for (var attr in source) {
              obj[attr] = source[attr];
            }
          });
          return obj;
        };
        v.extend(validate3, {
          // This is the version of the library as a semver.
          // The toString function will allow it to be coerced into a string
          version: {
            major: 0,
            minor: 13,
            patch: 1,
            metadata: null,
            toString: function() {
              var version2 = v.format("%{major}.%{minor}.%{patch}", v.version);
              if (!v.isEmpty(v.version.metadata)) {
                version2 += "+" + v.version.metadata;
              }
              return version2;
            }
          },
          // Below is the dependencies that are used in validate.js
          // The constructor of the Promise implementation.
          // If you are using Q.js, RSVP or any other A+ compatible implementation
          // override this attribute to be the constructor of that promise.
          // Since jQuery promises aren't A+ compatible they won't work.
          Promise: typeof Promise !== "undefined" ? Promise : (
            /* istanbul ignore next */
            null
          ),
          EMPTY_STRING_REGEXP: /^\s*$/,
          // Runs the validators specified by the constraints object.
          // Will return an array of the format:
          //     [{attribute: "<attribute name>", error: "<validation result>"}, ...]
          runValidations: function(attributes, constraints, options) {
            var results = [], attr, validatorName, value, validators, validator, validatorOptions, error;
            if (v.isDomElement(attributes) || v.isJqueryElement(attributes)) {
              attributes = v.collectFormValues(attributes);
            }
            for (attr in constraints) {
              value = v.getDeepObjectValue(attributes, attr);
              validators = v.result(constraints[attr], value, attributes, attr, options, constraints);
              for (validatorName in validators) {
                validator = v.validators[validatorName];
                if (!validator) {
                  error = v.format("Unknown validator %{name}", { name: validatorName });
                  throw new Error(error);
                }
                validatorOptions = validators[validatorName];
                validatorOptions = v.result(validatorOptions, value, attributes, attr, options, constraints);
                if (!validatorOptions) {
                  continue;
                }
                results.push({
                  attribute: attr,
                  value,
                  validator: validatorName,
                  globalOptions: options,
                  attributes,
                  options: validatorOptions,
                  error: validator.call(
                    validator,
                    value,
                    validatorOptions,
                    attr,
                    attributes,
                    options
                  )
                });
              }
            }
            return results;
          },
          // Takes the output from runValidations and converts it to the correct
          // output format.
          processValidationResults: function(errors, options) {
            errors = v.pruneEmptyErrors(errors, options);
            errors = v.expandMultipleErrors(errors, options);
            errors = v.convertErrorMessages(errors, options);
            var format = options.format || "grouped";
            if (typeof v.formatters[format] === "function") {
              errors = v.formatters[format](errors);
            } else {
              throw new Error(v.format("Unknown format %{format}", options));
            }
            return v.isEmpty(errors) ? void 0 : errors;
          },
          // Runs the validations with support for promises.
          // This function will return a promise that is settled when all the
          // validation promises have been completed.
          // It can be called even if no validations returned a promise.
          async: function(attributes, constraints, options) {
            options = v.extend({}, v.async.options, options);
            var WrapErrors = options.wrapErrors || function(errors) {
              return errors;
            };
            if (options.cleanAttributes !== false) {
              attributes = v.cleanAttributes(attributes, constraints);
            }
            var results = v.runValidations(attributes, constraints, options);
            return new v.Promise(function(resolve, reject) {
              v.waitForResults(results).then(function() {
                var errors = v.processValidationResults(results, options);
                if (errors) {
                  reject(new WrapErrors(errors, options, attributes, constraints));
                } else {
                  resolve(attributes);
                }
              }, function(err) {
                reject(err);
              });
            });
          },
          single: function(value, constraints, options) {
            options = v.extend({}, v.single.options, options, {
              format: "flat",
              fullMessages: false
            });
            return v({ single: value }, { single: constraints }, options);
          },
          // Returns a promise that is resolved when all promises in the results array
          // are settled. The promise returned from this function is always resolved,
          // never rejected.
          // This function modifies the input argument, it replaces the promises
          // with the value returned from the promise.
          waitForResults: function(results) {
            return results.reduce(function(memo, result) {
              if (!v.isPromise(result.error)) {
                return memo;
              }
              return memo.then(function() {
                return result.error.then(function(error) {
                  result.error = error || null;
                });
              });
            }, new v.Promise(function(r) {
              r();
            }));
          },
          // If the given argument is a call: function the and: function return the value
          // otherwise just return the value. Additional arguments will be passed as
          // arguments to the function.
          // Example:
          // ```
          // result('foo') // 'foo'
          // result(Math.max, 1, 2) // 2
          // ```
          result: function(value) {
            var args = [].slice.call(arguments, 1);
            if (typeof value === "function") {
              value = value.apply(null, args);
            }
            return value;
          },
          // Checks if the value is a number. This function does not consider NaN a
          // number like many other `isNumber` functions do.
          isNumber: function(value) {
            return typeof value === "number" && !isNaN(value);
          },
          // Returns false if the object is not a function
          isFunction: function(value) {
            return typeof value === "function";
          },
          // A simple check to verify that the value is an integer. Uses `isNumber`
          // and a simple modulo check.
          isInteger: function(value) {
            return v.isNumber(value) && value % 1 === 0;
          },
          // Checks if the value is a boolean
          isBoolean: function(value) {
            return typeof value === "boolean";
          },
          // Uses the `Object` function to check if the given argument is an object.
          isObject: function(obj) {
            return obj === Object(obj);
          },
          // Simply checks if the object is an instance of a date
          isDate: function(obj) {
            return obj instanceof Date;
          },
          // Returns false if the object is `null` of `undefined`
          isDefined: function(obj) {
            return obj !== null && obj !== void 0;
          },
          // Checks if the given argument is a promise. Anything with a `then`
          // function is considered a promise.
          isPromise: function(p) {
            return !!p && v.isFunction(p.then);
          },
          isJqueryElement: function(o) {
            return o && v.isString(o.jquery);
          },
          isDomElement: function(o) {
            if (!o) {
              return false;
            }
            if (!o.querySelectorAll || !o.querySelector) {
              return false;
            }
            if (v.isObject(document) && o === document) {
              return true;
            }
            if (typeof HTMLElement === "object") {
              return o instanceof HTMLElement;
            } else {
              return o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";
            }
          },
          isEmpty: function(value) {
            var attr;
            if (!v.isDefined(value)) {
              return true;
            }
            if (v.isFunction(value)) {
              return false;
            }
            if (v.isString(value)) {
              return v.EMPTY_STRING_REGEXP.test(value);
            }
            if (v.isArray(value)) {
              return value.length === 0;
            }
            if (v.isDate(value)) {
              return false;
            }
            if (v.isObject(value)) {
              for (attr in value) {
                return false;
              }
              return true;
            }
            return false;
          },
          // Formats the specified strings with the given values like so:
          // ```
          // format("Foo: %{foo}", {foo: "bar"}) // "Foo bar"
          // ```
          // If you want to write %{...} without having it replaced simply
          // prefix it with % like this `Foo: %%{foo}` and it will be returned
          // as `"Foo: %{foo}"`
          format: v.extend(function(str, vals) {
            if (!v.isString(str)) {
              return str;
            }
            return str.replace(v.format.FORMAT_REGEXP, function(m0, m1, m2) {
              if (m1 === "%") {
                return "%{" + m2 + "}";
              } else {
                return String(vals[m2]);
              }
            });
          }, {
            // Finds %{key} style patterns in the given string
            FORMAT_REGEXP: /(%?)%\{([^\}]+)\}/g
          }),
          // "Prettifies" the given string.
          // Prettifying means replacing [.\_-] with spaces as well as splitting
          // camel case words.
          prettify: function(str) {
            if (v.isNumber(str)) {
              if (str * 100 % 1 === 0) {
                return "" + str;
              } else {
                return parseFloat(Math.round(str * 100) / 100).toFixed(2);
              }
            }
            if (v.isArray(str)) {
              return str.map(function(s) {
                return v.prettify(s);
              }).join(", ");
            }
            if (v.isObject(str)) {
              if (!v.isDefined(str.toString)) {
                return JSON.stringify(str);
              }
              return str.toString();
            }
            str = "" + str;
            return str.replace(/([^\s])\.([^\s])/g, "$1 $2").replace(/\\+/g, "").replace(/[_-]/g, " ").replace(/([a-z])([A-Z])/g, function(m0, m1, m2) {
              return "" + m1 + " " + m2.toLowerCase();
            }).toLowerCase();
          },
          stringifyValue: function(value, options) {
            var prettify = options && options.prettify || v.prettify;
            return prettify(value);
          },
          isString: function(value) {
            return typeof value === "string";
          },
          isArray: function(value) {
            return {}.toString.call(value) === "[object Array]";
          },
          // Checks if the object is a hash, which is equivalent to an object that
          // is neither an array nor a function.
          isHash: function(value) {
            return v.isObject(value) && !v.isArray(value) && !v.isFunction(value);
          },
          contains: function(obj, value) {
            if (!v.isDefined(obj)) {
              return false;
            }
            if (v.isArray(obj)) {
              return obj.indexOf(value) !== -1;
            }
            return value in obj;
          },
          unique: function(array) {
            if (!v.isArray(array)) {
              return array;
            }
            return array.filter(function(el, index, array2) {
              return array2.indexOf(el) == index;
            });
          },
          forEachKeyInKeypath: function(object, keypath, callback) {
            if (!v.isString(keypath)) {
              return void 0;
            }
            var key = "", i, escape = false;
            for (i = 0; i < keypath.length; ++i) {
              switch (keypath[i]) {
                case ".":
                  if (escape) {
                    escape = false;
                    key += ".";
                  } else {
                    object = callback(object, key, false);
                    key = "";
                  }
                  break;
                case "\\":
                  if (escape) {
                    escape = false;
                    key += "\\";
                  } else {
                    escape = true;
                  }
                  break;
                default:
                  escape = false;
                  key += keypath[i];
                  break;
              }
            }
            return callback(object, key, true);
          },
          getDeepObjectValue: function(obj, keypath) {
            if (!v.isObject(obj)) {
              return void 0;
            }
            return v.forEachKeyInKeypath(obj, keypath, function(obj2, key) {
              if (v.isObject(obj2)) {
                return obj2[key];
              }
            });
          },
          // This returns an object with all the values of the form.
          // It uses the input name as key and the value as value
          // So for example this:
          // <input type="text" name="email" value="foo@bar.com" />
          // would return:
          // {email: "foo@bar.com"}
          collectFormValues: function(form, options) {
            var values = {}, i, j, input, inputs, option, value;
            if (v.isJqueryElement(form)) {
              form = form[0];
            }
            if (!form) {
              return values;
            }
            options = options || {};
            inputs = form.querySelectorAll("input[name], textarea[name]");
            for (i = 0; i < inputs.length; ++i) {
              input = inputs.item(i);
              if (v.isDefined(input.getAttribute("data-ignored"))) {
                continue;
              }
              var name = input.name.replace(/\./g, "\\\\.");
              value = v.sanitizeFormValue(input.value, options);
              if (input.type === "number") {
                value = value ? +value : null;
              } else if (input.type === "checkbox") {
                if (input.attributes.value) {
                  if (!input.checked) {
                    value = values[name] || null;
                  }
                } else {
                  value = input.checked;
                }
              } else if (input.type === "radio") {
                if (!input.checked) {
                  value = values[name] || null;
                }
              }
              values[name] = value;
            }
            inputs = form.querySelectorAll("select[name]");
            for (i = 0; i < inputs.length; ++i) {
              input = inputs.item(i);
              if (v.isDefined(input.getAttribute("data-ignored"))) {
                continue;
              }
              if (input.multiple) {
                value = [];
                for (j in input.options) {
                  option = input.options[j];
                  if (option && option.selected) {
                    value.push(v.sanitizeFormValue(option.value, options));
                  }
                }
              } else {
                var _val = typeof input.options[input.selectedIndex] !== "undefined" ? input.options[input.selectedIndex].value : (
                  /* istanbul ignore next */
                  ""
                );
                value = v.sanitizeFormValue(_val, options);
              }
              values[input.name] = value;
            }
            return values;
          },
          sanitizeFormValue: function(value, options) {
            if (options.trim && v.isString(value)) {
              value = value.trim();
            }
            if (options.nullify !== false && value === "") {
              return null;
            }
            return value;
          },
          capitalize: function(str) {
            if (!v.isString(str)) {
              return str;
            }
            return str[0].toUpperCase() + str.slice(1);
          },
          // Remove all errors who's error attribute is empty (null or undefined)
          pruneEmptyErrors: function(errors) {
            return errors.filter(function(error) {
              return !v.isEmpty(error.error);
            });
          },
          // In
          // [{error: ["err1", "err2"], ...}]
          // Out
          // [{error: "err1", ...}, {error: "err2", ...}]
          //
          // All attributes in an error with multiple messages are duplicated
          // when expanding the errors.
          expandMultipleErrors: function(errors) {
            var ret = [];
            errors.forEach(function(error) {
              if (v.isArray(error.error)) {
                error.error.forEach(function(msg) {
                  ret.push(v.extend({}, error, { error: msg }));
                });
              } else {
                ret.push(error);
              }
            });
            return ret;
          },
          // Converts the error mesages by prepending the attribute name unless the
          // message is prefixed by ^
          convertErrorMessages: function(errors, options) {
            options = options || {};
            var ret = [], prettify = options.prettify || v.prettify;
            errors.forEach(function(errorInfo) {
              var error = v.result(
                errorInfo.error,
                errorInfo.value,
                errorInfo.attribute,
                errorInfo.options,
                errorInfo.attributes,
                errorInfo.globalOptions
              );
              if (!v.isString(error)) {
                ret.push(errorInfo);
                return;
              }
              if (error[0] === "^") {
                error = error.slice(1);
              } else if (options.fullMessages !== false) {
                error = v.capitalize(prettify(errorInfo.attribute)) + " " + error;
              }
              error = error.replace(/\\\^/g, "^");
              error = v.format(error, {
                value: v.stringifyValue(errorInfo.value, options)
              });
              ret.push(v.extend({}, errorInfo, { error }));
            });
            return ret;
          },
          // In:
          // [{attribute: "<attributeName>", ...}]
          // Out:
          // {"<attributeName>": [{attribute: "<attributeName>", ...}]}
          groupErrorsByAttribute: function(errors) {
            var ret = {};
            errors.forEach(function(error) {
              var list = ret[error.attribute];
              if (list) {
                list.push(error);
              } else {
                ret[error.attribute] = [error];
              }
            });
            return ret;
          },
          // In:
          // [{error: "<message 1>", ...}, {error: "<message 2>", ...}]
          // Out:
          // ["<message 1>", "<message 2>"]
          flattenErrorsToArray: function(errors) {
            return errors.map(function(error) {
              return error.error;
            }).filter(function(value, index, self) {
              return self.indexOf(value) === index;
            });
          },
          cleanAttributes: function(attributes, whitelist) {
            function whitelistCreator(obj, key, last) {
              if (v.isObject(obj[key])) {
                return obj[key];
              }
              return obj[key] = last ? true : {};
            }
            function buildObjectWhitelist(whitelist2) {
              var ow = {}, lastObject, attr;
              for (attr in whitelist2) {
                if (!whitelist2[attr]) {
                  continue;
                }
                v.forEachKeyInKeypath(ow, attr, whitelistCreator);
              }
              return ow;
            }
            function cleanRecursive(attributes2, whitelist2) {
              if (!v.isObject(attributes2)) {
                return attributes2;
              }
              var ret = v.extend({}, attributes2), w, attribute;
              for (attribute in attributes2) {
                w = whitelist2[attribute];
                if (v.isObject(w)) {
                  ret[attribute] = cleanRecursive(ret[attribute], w);
                } else if (!w) {
                  delete ret[attribute];
                }
              }
              return ret;
            }
            if (!v.isObject(whitelist) || !v.isObject(attributes)) {
              return {};
            }
            whitelist = buildObjectWhitelist(whitelist);
            return cleanRecursive(attributes, whitelist);
          },
          exposeModule: function(validate4, root, exports3, module3, define3) {
            if (exports3) {
              if (module3 && module3.exports) {
                exports3 = module3.exports = validate4;
              }
              exports3.validate = validate4;
            } else {
              root.validate = validate4;
              if (validate4.isFunction(define3) && define3.amd) {
                define3([], function() {
                  return validate4;
                });
              }
            }
          },
          warn: function(msg) {
            if (typeof console !== "undefined" && console.warn) {
              console.warn("[validate.js] " + msg);
            }
          },
          error: function(msg) {
            if (typeof console !== "undefined" && console.error) {
              console.error("[validate.js] " + msg);
            }
          }
        });
        validate3.validators = {
          // Presence validates that the value isn't empty
          presence: function(value, options) {
            options = v.extend({}, this.options, options);
            if (options.allowEmpty !== false ? !v.isDefined(value) : v.isEmpty(value)) {
              return options.message || this.message || "can't be blank";
            }
          },
          length: function(value, options, attribute) {
            if (!v.isDefined(value)) {
              return;
            }
            options = v.extend({}, this.options, options);
            var is = options.is, maximum = options.maximum, minimum = options.minimum, tokenizer = options.tokenizer || function(val) {
              return val;
            }, err, errors = [];
            value = tokenizer(value);
            var length = value.length;
            if (!v.isNumber(length)) {
              return options.message || this.notValid || "has an incorrect length";
            }
            if (v.isNumber(is) && length !== is) {
              err = options.wrongLength || this.wrongLength || "is the wrong length (should be %{count} characters)";
              errors.push(v.format(err, { count: is }));
            }
            if (v.isNumber(minimum) && length < minimum) {
              err = options.tooShort || this.tooShort || "is too short (minimum is %{count} characters)";
              errors.push(v.format(err, { count: minimum }));
            }
            if (v.isNumber(maximum) && length > maximum) {
              err = options.tooLong || this.tooLong || "is too long (maximum is %{count} characters)";
              errors.push(v.format(err, { count: maximum }));
            }
            if (errors.length > 0) {
              return options.message || errors;
            }
          },
          numericality: function(value, options, attribute, attributes, globalOptions) {
            if (!v.isDefined(value)) {
              return;
            }
            options = v.extend({}, this.options, options);
            var errors = [], name, count, checks = {
              greaterThan: function(v2, c) {
                return v2 > c;
              },
              greaterThanOrEqualTo: function(v2, c) {
                return v2 >= c;
              },
              equalTo: function(v2, c) {
                return v2 === c;
              },
              lessThan: function(v2, c) {
                return v2 < c;
              },
              lessThanOrEqualTo: function(v2, c) {
                return v2 <= c;
              },
              divisibleBy: function(v2, c) {
                return v2 % c === 0;
              }
            }, prettify = options.prettify || globalOptions && globalOptions.prettify || v.prettify;
            if (v.isString(value) && options.strict) {
              var pattern = "^-?(0|[1-9]\\d*)";
              if (!options.onlyInteger) {
                pattern += "(\\.\\d+)?";
              }
              pattern += "$";
              if (!new RegExp(pattern).test(value)) {
                return options.message || options.notValid || this.notValid || this.message || "must be a valid number";
              }
            }
            if (options.noStrings !== true && v.isString(value) && !v.isEmpty(value)) {
              value = +value;
            }
            if (!v.isNumber(value)) {
              return options.message || options.notValid || this.notValid || this.message || "is not a number";
            }
            if (options.onlyInteger && !v.isInteger(value)) {
              return options.message || options.notInteger || this.notInteger || this.message || "must be an integer";
            }
            for (name in checks) {
              count = options[name];
              if (v.isNumber(count) && !checks[name](value, count)) {
                var key = "not" + v.capitalize(name);
                var msg = options[key] || this[key] || this.message || "must be %{type} %{count}";
                errors.push(v.format(msg, {
                  count,
                  type: prettify(name)
                }));
              }
            }
            if (options.odd && value % 2 !== 1) {
              errors.push(options.notOdd || this.notOdd || this.message || "must be odd");
            }
            if (options.even && value % 2 !== 0) {
              errors.push(options.notEven || this.notEven || this.message || "must be even");
            }
            if (errors.length) {
              return options.message || errors;
            }
          },
          datetime: v.extend(function(value, options) {
            if (!v.isFunction(this.parse) || !v.isFunction(this.format)) {
              throw new Error("Both the parse and format functions needs to be set to use the datetime/date validator");
            }
            if (!v.isDefined(value)) {
              return;
            }
            options = v.extend({}, this.options, options);
            var err, errors = [], earliest = options.earliest ? this.parse(options.earliest, options) : NaN, latest = options.latest ? this.parse(options.latest, options) : NaN;
            value = this.parse(value, options);
            if (isNaN(value) || options.dateOnly && value % 864e5 !== 0) {
              err = options.notValid || options.message || this.notValid || "must be a valid date";
              return v.format(err, { value: arguments[0] });
            }
            if (!isNaN(earliest) && value < earliest) {
              err = options.tooEarly || options.message || this.tooEarly || "must be no earlier than %{date}";
              err = v.format(err, {
                value: this.format(value, options),
                date: this.format(earliest, options)
              });
              errors.push(err);
            }
            if (!isNaN(latest) && value > latest) {
              err = options.tooLate || options.message || this.tooLate || "must be no later than %{date}";
              err = v.format(err, {
                date: this.format(latest, options),
                value: this.format(value, options)
              });
              errors.push(err);
            }
            if (errors.length) {
              return v.unique(errors);
            }
          }, {
            parse: null,
            format: null
          }),
          date: function(value, options) {
            options = v.extend({}, options, { dateOnly: true });
            return v.validators.datetime.call(v.validators.datetime, value, options);
          },
          format: function(value, options) {
            if (v.isString(options) || options instanceof RegExp) {
              options = { pattern: options };
            }
            options = v.extend({}, this.options, options);
            var message = options.message || this.message || "is invalid", pattern = options.pattern, match;
            if (!v.isDefined(value)) {
              return;
            }
            if (!v.isString(value)) {
              return message;
            }
            if (v.isString(pattern)) {
              pattern = new RegExp(options.pattern, options.flags);
            }
            match = pattern.exec(value);
            if (!match || match[0].length != value.length) {
              return message;
            }
          },
          inclusion: function(value, options) {
            if (!v.isDefined(value)) {
              return;
            }
            if (v.isArray(options)) {
              options = { within: options };
            }
            options = v.extend({}, this.options, options);
            if (v.contains(options.within, value)) {
              return;
            }
            var message = options.message || this.message || "^%{value} is not included in the list";
            return v.format(message, { value });
          },
          exclusion: function(value, options) {
            if (!v.isDefined(value)) {
              return;
            }
            if (v.isArray(options)) {
              options = { within: options };
            }
            options = v.extend({}, this.options, options);
            if (!v.contains(options.within, value)) {
              return;
            }
            var message = options.message || this.message || "^%{value} is restricted";
            if (v.isString(options.within[value])) {
              value = options.within[value];
            }
            return v.format(message, { value });
          },
          email: v.extend(function(value, options) {
            options = v.extend({}, this.options, options);
            var message = options.message || this.message || "is not a valid email";
            if (!v.isDefined(value)) {
              return;
            }
            if (!v.isString(value)) {
              return message;
            }
            if (!this.PATTERN.exec(value)) {
              return message;
            }
          }, {
            PATTERN: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i
          }),
          equality: function(value, options, attribute, attributes, globalOptions) {
            if (!v.isDefined(value)) {
              return;
            }
            if (v.isString(options)) {
              options = { attribute: options };
            }
            options = v.extend({}, this.options, options);
            var message = options.message || this.message || "is not equal to %{attribute}";
            if (v.isEmpty(options.attribute) || !v.isString(options.attribute)) {
              throw new Error("The attribute must be a non empty string");
            }
            var otherValue = v.getDeepObjectValue(attributes, options.attribute), comparator = options.comparator || function(v1, v2) {
              return v1 === v2;
            }, prettify = options.prettify || globalOptions && globalOptions.prettify || v.prettify;
            if (!comparator(value, otherValue, options, attribute, attributes)) {
              return v.format(message, { attribute: prettify(options.attribute) });
            }
          },
          // A URL validator that is used to validate URLs with the ability to
          // restrict schemes and some domains.
          url: function(value, options) {
            if (!v.isDefined(value)) {
              return;
            }
            options = v.extend({}, this.options, options);
            var message = options.message || this.message || "is not a valid url", schemes = options.schemes || this.schemes || ["http", "https"], allowLocal = options.allowLocal || this.allowLocal || false, allowDataUrl = options.allowDataUrl || this.allowDataUrl || false;
            if (!v.isString(value)) {
              return message;
            }
            var regex = "^(?:(?:" + schemes.join("|") + ")://)(?:\\S+(?::\\S*)?@)?(?:";
            var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";
            if (allowLocal) {
              tld += "?";
            } else {
              regex += // IP address exclusion
              // private & local networks
              "(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})";
            }
            regex += // IP address dotted notation octets
            // excludes loopback network 0.0.0.0
            // excludes reserved space >= 224.0.0.0
            // excludes network & broacast addresses
            // (first & last IP address of each class)
            "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*" + tld + ")(?::\\d{2,5})?(?:[/?#]\\S*)?$";
            if (allowDataUrl) {
              var mediaType = "\\w+\\/[-+.\\w]+(?:;[\\w=]+)*";
              var urlchar = "[A-Za-z0-9-_.!~\\*'();\\/?:@&=+$,%]*";
              var dataurl = "data:(?:" + mediaType + ")?(?:;base64)?," + urlchar;
              regex = "(?:" + regex + ")|(?:^" + dataurl + "$)";
            }
            var PATTERN = new RegExp(regex, "i");
            if (!PATTERN.exec(value)) {
              return message;
            }
          },
          type: v.extend(function(value, originalOptions, attribute, attributes, globalOptions) {
            if (v.isString(originalOptions)) {
              originalOptions = { type: originalOptions };
            }
            if (!v.isDefined(value)) {
              return;
            }
            var options = v.extend({}, this.options, originalOptions);
            var type = options.type;
            if (!v.isDefined(type)) {
              throw new Error("No type was specified");
            }
            var check;
            if (v.isFunction(type)) {
              check = type;
            } else {
              check = this.types[type];
            }
            if (!v.isFunction(check)) {
              throw new Error("validate.validators.type.types." + type + " must be a function.");
            }
            if (!check(value, options, attribute, attributes, globalOptions)) {
              var message = originalOptions.message || this.messages[type] || this.message || options.message || (v.isFunction(type) ? "must be of the correct type" : "must be of type %{type}");
              if (v.isFunction(message)) {
                message = message(value, originalOptions, attribute, attributes, globalOptions);
              }
              return v.format(message, { attribute: v.prettify(attribute), type });
            }
          }, {
            types: {
              object: function(value) {
                return v.isObject(value) && !v.isArray(value);
              },
              array: v.isArray,
              integer: v.isInteger,
              number: v.isNumber,
              string: v.isString,
              date: v.isDate,
              boolean: v.isBoolean
            },
            messages: {}
          })
        };
        validate3.formatters = {
          detailed: function(errors) {
            return errors;
          },
          flat: v.flattenErrorsToArray,
          grouped: function(errors) {
            var attr;
            errors = v.groupErrorsByAttribute(errors);
            for (attr in errors) {
              errors[attr] = v.flattenErrorsToArray(errors[attr]);
            }
            return errors;
          },
          constraint: function(errors) {
            var attr;
            errors = v.groupErrorsByAttribute(errors);
            for (attr in errors) {
              errors[attr] = errors[attr].map(function(result) {
                return result.validator;
              }).sort();
            }
            return errors;
          }
        };
        validate3.exposeModule(validate3, this, exports2, module2, define2);
      }).call(
        exports,
        typeof exports !== "undefined" ? (
          /* istanbul ignore next */
          exports
        ) : null,
        typeof module !== "undefined" ? (
          /* istanbul ignore next */
          module
        ) : null,
        typeof define !== "undefined" ? (
          /* istanbul ignore next */
          define
        ) : null
      );
    }
  });

  // src/js/ekyc.js
  var import_validate2 = __toESM(require_validate(), 1);

  // ../components/combobox/src/Combobox.js
  function generateId(prefix) {
    const id = [...Array(30)].map(() => Math.random().toString(36)[3]).join("");
    return `${prefix}-${id}`;
  }
  function isElementInView(element) {
    const bounding = element.getBoundingClientRect();
    return bounding.top >= 0 && bounding.left >= 0 && bounding.bottom <= (window.innerHeight || document.documentElement.clientHeight) && bounding.right <= (window.innerWidth || document.documentElement.clientWidth);
  }
  function isScrollable(element) {
    return element && element.clientHeight < element.scrollHeight;
  }
  function maintainScrollVisibility(activeElement, scrollParent) {
    const { offsetHeight, offsetTop } = activeElement;
    const { offsetHeight: parentOffsetHeight, scrollTop } = scrollParent;
    const isAbove = offsetTop < scrollTop;
    const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;
    if (isAbove) {
      scrollParent.scrollTo(0, offsetTop);
    } else if (isBelow) {
      scrollParent.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);
    }
  }
  var ComboboxRoot = class extends HTMLElement {
    constructor() {
      super();
      this.handleRoaming = this.handleRoaming.bind(this);
    }
    connectedCallback() {
      this.trigger = this.querySelector("smileid-combobox-trigger");
      document.addEventListener("click", this.handleRoaming);
      this.addEventListener("focusout", this.handleRoaming);
      this.addEventListener("blur", this.handleRoaming);
    }
    disconnectedCallback() {
      document.removeEventListener("click", this.handleRoaming);
      this.removeEventListener("focusout", this.handleRoaming);
      this.removeEventListener("blur", this.handleRoaming);
    }
    handleRoaming(event) {
      const target = event.relatedTarget || event.target;
      if (this.contains(target)) {
        return;
      }
      if (this.trigger.getAttribute("expanded") === "true") {
        this.trigger.setAttribute("expanded", "false");
      }
    }
  };
  var ComboboxTrigger = class extends HTMLElement {
    constructor() {
      super();
      this.handleKeyUp = this.handleKeyUp.bind(this);
      this.handleKeyDown = this.handleKeyDown.bind(this);
      this.handleSelection = this.handleSelection.bind(this);
      this.toggleExpansionState = this.toggleExpansionState.bind(this);
    }
    get type() {
      return this.getAttribute("type") || "text";
    }
    get label() {
      return this.getAttribute("label") || "";
    }
    get value() {
      return this.getAttribute("value") || "";
    }
    get disabled() {
      return this.hasAttribute("disabled");
    }
    connectedCallback() {
      if (!this.label) {
        throw new Error("<combobox-trigger>: a label attribute is required");
      }
      this.innerHTML = `${this.type === "text" ? `
        <div>
          <input ${this.value ? `value="${this.value}" ` : ""}${this.disabled ? " disabled " : ""}type="text" placeholder="${this.label}" />
          <button ${this.disabled ? "disabled " : ""}tabindex='-1' type='button'>
            <span class="visually-hidden">Toggle</span>
          </button>
        </div>
      ` : `<button ${this.disabled ? "disabled " : ""}type="button">${this.value || this.label}</button>`}`;
      this.setAttribute("expanded", false);
      this.inputTrigger = this.querySelector("input");
      this.buttonTrigger = this.querySelector("button");
      this.buttonTrigger.setAttribute("aria-expanded", false);
      this.buttonTrigger.setAttribute("role", "combobox");
      this.buttonTrigger.addEventListener("keydown", this.handleKeyDown);
      this.buttonTrigger.addEventListener("click", this.toggleExpansionState);
      if (this.inputTrigger) {
        this.inputTrigger.setAttribute("aria-expanded", false);
        this.inputTrigger.setAttribute("role", "combobox");
        this.inputTrigger.addEventListener("keydown", this.handleKeyDown);
        this.inputTrigger.addEventListener("keyup", this.handleKeyUp);
        this.inputTrigger.addEventListener("change", (e) => e.stopPropagation());
      }
      this.listbox = this.parentElement.querySelector("smileid-combobox-listbox");
      this.options = Array.from(
        this.parentElement.querySelectorAll("smileid-combobox-option")
      );
      this.options.forEach((node) => {
        node.addEventListener("Combobox::Option::Select", this.handleSelection);
      });
    }
    disconnectedCallback() {
      this.buttonTrigger.removeEventListener("keydown", this.handleKeyDown);
      this.buttonTrigger.removeEventListener("click", this.toggleExpansionState);
      if (this.inputTrigger) {
        this.inputTrigger.removeEventListener("keydown", this.handleKeyDown);
        this.inputTrigger.removeEventListener("keyup", this.handleKeyUp);
        this.inputTrigger.removeEventListener(
          "change",
          (e) => e.stopPropagation()
        );
      }
      if (this.options) {
        this.options.forEach((node) => {
          node.removeEventListener(
            "Combobox::Option::Select",
            this.handleSelection
          );
        });
      }
    }
    handleKeyDown(event) {
      if (event.ctrlKey || event.shiftKey) {
        return;
      }
      const key = event.key;
      switch (key) {
        case "Enter":
        case "Space":
        case " ":
          if (this.getAttribute("expanded") === "true") {
            if (this.inputTrigger && (key === "Space" || key === " ")) {
              this.resetListbox();
            } else {
              event.preventDefault();
              const selectedOption = this.buttonTrigger.getAttribute(
                "aria-activedescendant"
              );
              if (selectedOption) {
                document.getElementById(selectedOption).click();
              }
            }
          } else {
            event.preventDefault();
            this.toggleExpansionState();
          }
          break;
        case "Esc":
        case "Escape":
          event.preventDefault();
          if (this.getAttribute("expanded") === "true") {
            this.toggleExpansionState();
          }
          break;
        case "Down":
        case "ArrowDown":
          event.preventDefault();
          if (this.getAttribute("expanded") !== "true") {
            this.toggleExpansionState();
            this.focusListbox("First");
          } else {
            this.focusListbox("Down");
          }
          break;
        case "Up":
        case "ArrowUp":
          event.preventDefault();
          if (this.getAttribute("expanded") !== "true") {
            this.toggleExpansionState();
            this.focusListbox("Last");
          } else {
            this.focusListbox("Up");
          }
          break;
        case "Left":
        case "ArrowLeft":
        case "Right":
        case "ArrowRight":
        case "Home":
        case "End":
          this.resetListbox();
          break;
        case "Tab":
          break;
        default:
          break;
      }
    }
    handleKeyUp(event) {
      const key = event.key;
      const isPrintableCharacter = (str) => str.length === 1 && str.match(/\S| /);
      if (event.key === "Escape" || event.key === "Esc") {
        event.preventDefault();
        if (this.getAttribute("expanded") === "true") {
          this.toggleExpansionState();
        } else if (this.inputTrigger) {
          this.inputTrigger.value = "";
          this.listbox.dispatchEvent(
            new CustomEvent("Combobox::Listbox::Filter", { detail: "" })
          );
        }
      }
      if (isPrintableCharacter(key) || key === "Backspace") {
        this.resetListbox();
        this.filterListbox(event.target.value);
      }
    }
    toggleExpansionState() {
      const listboxIsExpanded = this.getAttribute("expanded") === "true";
      this.setAttribute("expanded", !listboxIsExpanded);
      this.buttonTrigger.setAttribute("aria-expanded", !listboxIsExpanded);
      if (this.inputTrigger) {
        this.inputTrigger.setAttribute("aria-expanded", !listboxIsExpanded);
      }
    }
    handleSelection(event) {
      if (this.inputTrigger) {
        this.inputTrigger.value = event.detail.label;
      } else {
        this.buttonTrigger.textContent = event.detail.label;
      }
      this.toggleExpansionState();
      this.parentElement.dispatchEvent(
        new CustomEvent("change", {
          detail: {
            value: event.detail.value
          }
        })
      );
    }
    filterListbox(value) {
      if (this.getAttribute("expanded") !== "true") {
        this.toggleExpansionState();
      }
      this.listbox.dispatchEvent(
        new CustomEvent("Combobox::Listbox::Filter", { detail: value })
      );
    }
    focusListbox(direction) {
      this.resetListbox();
      this.listbox.dispatchEvent(
        new CustomEvent("Combobox::Listbox::Focus", {
          detail: {
            direction
          }
        })
      );
    }
    resetListbox() {
      this.listbox.dispatchEvent(new CustomEvent("Combobox::Listbox::Reset"));
    }
  };
  var ComboboxListbox = class extends HTMLElement {
    constructor() {
      super();
      this.handleFilter = this.handleFilter.bind(this);
      this.handleFocus = this.handleFocus.bind(this);
      this.handleReset = this.handleReset.bind(this);
      this.handleOptionSelection = this.handleOptionSelection.bind(this);
    }
    get emptyLabel() {
      return this.getAttribute("empty-label");
    }
    get emptyState() {
      return `
      <p id='empty-state' style="text-align: center;">
        ${this.emptyLabel || "No items"}
      </p>
    `;
    }
    connectedCallback() {
      this.setAttribute("role", "listbox");
      this.setAttribute("id", generateId("listbox"));
      this.addEventListener("Combobox::Listbox::Filter", this.handleFilter);
      this.addEventListener("Combobox::Listbox::Focus", this.handleFocus);
      this.addEventListener("Combobox::Listbox::Reset", this.handleReset);
      this.triggers = Array.from(
        this.parentElement.querySelectorAll(
          "smileid-combobox-trigger input, smileid-combobox-trigger button"
        )
      );
      this.triggers.forEach(
        (node) => node.setAttribute("aria-controls", this.getAttribute("id"))
      );
      this.optionNodes = Array.from(
        this.querySelectorAll("smileid-combobox-option")
      );
      this.selectedNode = this.optionNodes.find(
        (node) => !node.hasAttribute("hidden") && node.hasAttribute("aria-selected")
      ) || this.optionNodes.filter((node) => !node.hasAttribute("hidden"))[0];
      this.selectedNode.setAttribute("tabindex", "0");
      this.optionNodes.forEach((node) => {
        node.addEventListener(
          "Combobox::Option::Select",
          this.handleOptionSelection
        );
      });
      if (this.optionNodes.length === 0) {
        this.innerHTML = this.emptyState;
      }
    }
    disconnectedCallback() {
      this.removeEventListener("Combobox::Listbox::Filter", this.handleFilter);
      this.removeEventListener("Combobox::Listbox::Focus", this.handleFocus);
      this.removeEventListener("Combobox::Listbox::Reset", this.handleReset);
      this.optionNodes.forEach((node) => {
        node.removeEventListener(
          "Combobox::Option::Select",
          this.handleOptionSelection
        );
      });
    }
    static get observedAttributes() {
      return ["search-term"];
    }
    attributeChangedCallback(name, oldValue, newValue) {
      switch (name) {
        case "search-term":
          if (oldValue && !newValue) {
            this.optionNodes.forEach((node) => {
              node.removeAttribute("hidden");
            });
          } else if (newValue) {
            this.filterNodes(newValue);
          }
          break;
        default:
          break;
      }
    }
    filterNodes(searchTerm) {
      this.optionNodes.forEach((node) => {
        const value = node.getAttribute("value").toLowerCase();
        const label = node.getAttribute("label").toLowerCase();
        const containsSearchTerm = value.includes(searchTerm.toLowerCase()) || label.includes(searchTerm.toLowerCase());
        if (containsSearchTerm) {
          node.removeAttribute("hidden");
        } else {
          node.setAttribute("hidden", true);
        }
      });
      const optionsVisible = this.optionNodes.find(
        (node) => !node.hasAttribute("hidden")
      );
      const emptyState = this.querySelector("#empty-state");
      if (!optionsVisible && !emptyState) {
        this.insertAdjacentHTML("afterbegin", this.emptyState);
      } else if (optionsVisible && emptyState) {
        this.removeChild(emptyState);
      }
    }
    handleFilter(event) {
      const searchTerm = event.detail;
      this.setAttribute("search-term", searchTerm);
    }
    handleFocus(event) {
      this.setSelected(event.detail.direction);
    }
    handleReset() {
      this.optionNodes.forEach((node) => node.setAttribute("tabindex", "-1"));
    }
    handleOptionSelection(event) {
      const inputTrigger = this.triggers.filter(
        (node) => node.tagName === "INPUT"
      )[0];
      if (inputTrigger) {
        this.setAttribute("search-term", event.detail.label);
      }
    }
    setSelected(direction) {
      const visibleOptions = this.optionNodes.filter(
        (node) => !node.hasAttribute("hidden")
      );
      this.selectedNode.setAttribute("tabindex", "0");
      const currentIndex = visibleOptions.findIndex(
        (node) => node === this.selectedNode
      );
      const lastIndex = visibleOptions.length - 1;
      let nextIndex;
      switch (direction) {
        case "First":
          nextIndex = 0;
          break;
        case "Last":
          nextIndex = lastIndex;
          break;
        case "Up":
          if (currentIndex === 0) {
            nextIndex = lastIndex;
          } else {
            nextIndex = currentIndex - 1;
          }
          break;
        default:
          if (currentIndex === lastIndex) {
            nextIndex = 0;
          } else {
            nextIndex = currentIndex + 1;
          }
          break;
      }
      if (currentIndex !== nextIndex) {
        this.swapSelected(this.selectedNode, visibleOptions[nextIndex]);
      }
    }
    swapSelected(currentNode, newNode) {
      currentNode.setAttribute("tabindex", "-1");
      newNode.setAttribute("tabindex", "0");
      this.selectedNode = newNode;
      if (isScrollable(this)) {
        maintainScrollVisibility(this.selectedNode, this);
      }
      if (!isElementInView(newNode)) {
        newNode.scrollIntoView({ behavior: "smooth", block: "nearest" });
      }
      this.triggers.forEach(
        (node) => node.setAttribute("aria-activedescendant", newNode.id)
      );
    }
  };
  var ComboboxOption = class extends HTMLElement {
    connectedCallback() {
      this.setAttribute("role", "option");
      this.setAttribute("tabindex", "-1");
      this.setAttribute("id", generateId("option"));
      this.options = Array.from(
        this.parentElement.querySelectorAll("smileid-combobox-option")
      );
      this.addEventListener("click", this.select);
    }
    disconnectedCallback() {
      this.removeEventListener("click", this.select);
    }
    get value() {
      return this.getAttribute("value");
    }
    get label() {
      return this.getAttribute("label");
    }
    select() {
      const selectedOption = this.options.find(
        (node) => node.getAttribute("aria-selected")
      );
      if (selectedOption) {
        selectedOption.removeAttribute("aria-selected");
      }
      this.setAttribute("aria-selected", true);
      this.dispatchEvent(
        new CustomEvent("Combobox::Option::Select", {
          detail: {
            label: this.label,
            value: this.value,
            id: this.getAttribute("id")
          }
        })
      );
    }
  };
  var Root = ComboboxRoot;
  var Trigger = ComboboxTrigger;
  var List = ComboboxListbox;
  var Option = ComboboxOption;
  if ("customElements" in window) {
    window.customElements.define("smileid-combobox", Root);
    window.customElements.define("smileid-combobox-trigger", Trigger);
    window.customElements.define("smileid-combobox-listbox", List);
    window.customElements.define("smileid-combobox-option", Option);
  }

  // ../components/end-user-consent/src/EndUserConsent.js
  function templateString() {
    return `
    <style>
      *,
      *::before,
      *::after {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      :host {
        --flow-space: 1.5rem;

        --color-dark: #404040;
        --color-grey: #555B69;

        --color-success: #1EB244;
        --color-failure: #FFEDEB;
        --color-failure-tint: #F86B58;

        --color-richblue: #043C93;
        --color-theme: ${this.themeColor};
      }

      html {
        font-family: 'DM Sans', sans-serif;
      }

      [hidden] {
        display: none !important;
      }

      [disabled] {
        cursor: not-allowed !important;
        filter: grayscale(75%);
      }

      .visually-hidden {
        border: 0;
        clip: rect(1px 1px 1px 1px);
        clip: rect(1px, 1px, 1px, 1px);
        height: auto;
        margin: 0;
        overflow: hidden;
        padding: 0;
        position: absolute;
        white-space: nowrap;
        width: 1px;
      }

      .color-dark {
        color: var(--color-dark);
      }

      .color-grey {
        color: var(--color-grey);
      }

      .flow > * + * {
        margin-top: var(--flow-space);
      }

      .center {
        margin-left: auto;
        margin-right: auto;

        text-align: center;
      }

      h1 {
        font-size: 20px;
        font-weight: 400;
      }

      ol[role=list], ul[role=list] {
        list-style: none;
        padding-left: 0;
      }

      button {
        --button-color: var(--color-default);
        --flow-space: 3rem;
        -webkit-appearance: none;
        -moz-appearance: none;
        align-items: center;
        appearance: none;
        background-color: transparent;
        border-radius: 2.5rem;
        border: none;
        color: #ffffff;
        cursor: pointer;
        display: inline-flex;
        font-size: 20px;
        font-weight: 500;
        inline-size: 100%;
        justify-content: center;
        letter-spacing: .05ch;
        line-height: 1;
        padding: 1rem 2.5rem;
        text-align: center;
        text-decoration: none;
      }

      button[data-variant='solid'] {
        background-color: var(--button-color);
        border: 2px solid var(--button-color);
      }

      button[data-variant='outline'] {
        color: var(--button-color);
        border: 2px solid var(--button-color);
      }

      button[data-variant='ghost'] {
        color: var(--button-color);
      }

      button:hover,
      button:focus,
      button:active {
        --button-color: var(--color-active);
      }

      button:disabled {
        --button-color: var(--color-disabled);
      }

      button[data-type='icon'] {
        align-items: center;
        background-color: transparent;
        border: 0;
        cursor: pointer;
        display: flex;
        padding: 0;
      }

      button[data-type='icon'] {
        height: 2rem;
        padding: 0;
        width: 2rem;
        background: transparent;
      }

      .nav {
        display: flex;
        justify-content: space-between;
      }

      .justify-right {
        justify-content: end !important;
      }

      .back-wrapper {
        display: flex;
        align-items: center;
      }
      
      .back-button-text {
        font-size: 11px;
        line-height: 11px;
        color: rgb(21, 31, 114);
      }

      img {
        border-radius: 50%;
        position: relative;
      }

      img::before {
        background-color: #ffffff;
        border-radius: 50%;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }

      .demo-tip {
        align-items: center;
        background-color: #f5fcff;
        border-radius: .75rem;
        border: 1px solid #A9D1E8;
        color: inherit;
        display: flex;
        font-size: .875rem;
        max-width: 36rem;
        padding: 1rem;
        text-align: left;
        text-decoration: none;
      }

      .demo-tip > * + * {
        margin-left: .5rem;
      }

      .callout {
        border: 0.8px solid #DEEAEF;
        border-radius: .5rem;
        font-size: .875rem;
        padding: 1rem 1.5rem;
      }

      .processing-list {
      }

      .processing-list__items {
        display: flex;
        align-items: center;
      }

      .processing-list__items > * + p {
        margin-left: 1rem;
      }

      .processing-list__items > :last-child {
        margin-left: auto;
      }

      .theme {
        font-weight: 700;
        color: var(--color-theme);
      }

      .tooltip {
        position: relative;
      }

      .tooltip__trigger {
      }

      .tooltip__trigger:focus + .tooltip__content,
      .tooltip__trigger:hover + .tooltip__content {
        display: flex;
      }

      .tooltip__content {
        align-items: flex-start;
        background-color: #ffffff;
        border-radius: .5rem;
        box-shadow: 0px 12px 36px rgba(0, 0, 0, 0.08);
        display: none;
        padding: 1.25rem;
        position: absolute;
        right: 20px;
        bottom: -50px;
        width: 200px;
      }

      .tooltip__content > :last-child {
        margin-left: 1rem;
      }

      .tooltip__content .title {
        font-size: .75rem;
        font-weight: 700;
      }

      .tooltip__content .description {
        --flow-space: .25rem;
        font-size: .625rem;
        color: #6B7280;
      }

      svg {
        flex-shrink: 0;
      }

      [disabled] {
        cursor: not-allowed;
        filter: opacity(.7);
      }

      .credits {
        --flow-space: 2rem;
        margin-inline: auto;
        max-inline-size: 10rem;
      }

      .company-name {
        text-transform: uppercase;
        letter-spacing: .1rem;
        border-left: 1px solid #cecece;
        margin-left: .75rem;
        padding-left: .75rem;
        display: inline-flex;
        align-items: center;
      }

      .company-name svg {
        margin-right: .5rem;
      }
    </style>

    <div id='consent-screen'>
      <section class='flow center'>
        <div class="nav ${this.hideBack ? "justify-right" : ""}">
          <div class="back-wrapper" ${this.hideBack ? "hidden" : ""}>
            <button type='button' data-type='icon' id="back-button" class="back-button">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none">
                <path fill="#DBDBC4" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10Z" opacity=".4"/>
                <path fill="#001096" d="M15.5 11.25h-5.19l1.72-1.72c.29-.29.29-.77 0-1.06a.754.754 0 0 0-1.06 0l-3 3c-.29.29-.29.77 0 1.06l3 3c.15.15.34.22.53.22s.38-.07.53-.22c.29-.29.29-.77 0-1.06l-1.72-1.72h5.19c.41 0 .75-.34.75-.75s-.34-.75-.75-.75Z"/>
              </svg>
            </button>
            <div class="back-button-text">Back</div>
          </div>
          <button data-type='icon' type='button' class='close-iframe'>
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none">
              <path fill="#DBDBC4" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10Z" opacity=".4"/>
              <path fill="#91190F" d="m13.06 12 2.3-2.3c.29-.29.29-.77 0-1.06a.754.754 0 0 0-1.06 0l-2.3 2.3-2.3-2.3a.754.754 0 0 0-1.06 0c-.29.29-.29.77 0 1.06l2.3 2.3-2.3 2.3c-.29.29-.29.77 0 1.06.15.15.34.22.53.22s.38-.07.53-.22l2.3-2.3 2.3 2.3c.15.15.34.22.53.22s.38-.07.53-.22c.29-.29.29-.77 0-1.06l-2.3-2.3Z"/>
            </svg>
            <span class='visually-hidden'>Close SmileIdentity Verification frame</span>
          </button>
        </div>
        <img alt='' width='50' height='50' src='${this.partnerLogoURL}' />
        <p class='demo-tip' ${this.demoMode ? "" : "hidden"}>
          <svg aria-hidden='true' width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect x="4.46045" y="4.46069" width="47.7205" height="47.7205" rx="23.8603" fill="white"/>
            <path fill-rule="evenodd" clip-rule="evenodd" d="M35.1578 25.7487H34.2813V23.1195C34.2813 20.2273 31.915 17.861 29.0229 17.861C26.1307 17.861 23.7644 20.2273 23.7644 23.1195V25.7487H22.888C21.3981 25.7487 20.2588 26.888 20.2588 28.3779V34.5128C20.2588 36.0027 21.3981 37.142 22.888 37.142H35.1578C36.6476 37.142 37.787 36.0027 37.787 34.5128V28.3779C37.787 26.888 36.6476 25.7487 35.1578 25.7487ZM25.5171 23.1194C25.5171 21.1913 27.0946 19.6138 29.0227 19.6138C30.9508 19.6138 32.5283 21.1913 32.5283 23.1194V25.7487H25.5171V23.1194ZM35.1577 35.3892C35.6836 35.3892 36.0342 35.0386 36.0342 34.5128V28.3779C36.0342 27.8521 35.6836 27.5015 35.1577 27.5015H22.888C22.3622 27.5015 22.0116 27.8521 22.0116 28.3779V34.5128C22.0116 35.0386 22.3622 35.3892 22.888 35.3892H35.1577Z" fill="#2D9CDB"/>
            <rect x="4.46045" y="4.46069" width="47.7205" height="47.7205" rx="23.8603" stroke="#DDF2F7" stroke-width="7.15808"/>
          </svg>

          <span>
            This consent screen is for illustrative purposes only. Demo App does not collect personal ID data.
          </span>
        </p>
        <h1>
          <span class='theme'>${this.partnerName}</span>
          wants to access your
          <span class='theme'>${this.idTypeLabel}</span>
          information
        </h1>
        <p class='color-grey'>
          This will allow ${this.partnerName} to:
        </p>
      </section>

      <ul role='list' class='processing-list flow' style='--flow-space: 2.5rem; margin: var(--flow-space) auto;'>
        <li class='processing-list__items'>
          <svg width="23" height="23" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="22.723" height="22.575" rx="4.537" fill="#2F718D"/>
            <path d="M5.681 6.773c0-.621.511-1.13 1.136-1.13h5.68c.626 0 1.137.509 1.137 1.13 0 .62-.511 1.128-1.136 1.128h-5.68A1.136 1.136 0 0 1 5.68 6.773ZM5.68 11.288c0-.62.512-1.129 1.137-1.129h9.089c.625 0 1.136.508 1.136 1.129 0 .62-.511 1.129-1.136 1.129h-9.09a1.136 1.136 0 0 1-1.135-1.129ZM5.68 15.803c0-.621.512-1.13 1.137-1.13h2.272c.625 0 1.136.509 1.136 1.13 0 .62-.511 1.128-1.136 1.128H6.817a1.136 1.136 0 0 1-1.136-1.128Z" fill="#fff"/>
          </svg>
          <p>
            Process your personal details
          </p>
          <div class='tooltip'>
            <button class='tooltip__trigger' type='button' data-type='icon'>
              <svg width="17" height="17" fill="none" xmlns="http://www.w3.org/2000/svg">
                <symbol id='info-icon'>
                  <ellipse cx="8.512" cy="8.463" rx="7.512" ry="7.463" stroke="#043C93" stroke-linecap="round" stroke-linejoin="round"/>
                  <path fill-rule="evenodd" clip-rule="evenodd" d="M8.512 6.473c.692 0 1.252-.557 1.252-1.244 0-.687-.56-1.244-1.252-1.244-.691 0-1.252.557-1.252 1.244 0 .687.56 1.244 1.252 1.244ZM7.51 7.663a.8.8 0 0 0 0 1.6h.202v3.18a.8.8 0 0 0 .8.8h1.002a.8.8 0 0 0 0-1.6h-.202v-3.18a.8.8 0 0 0-.8-.8H7.51Z" fill="#043C93"/>
                </symbol>
                <use href='#info-icon' />
              </svg>
              <span class='visually-hidden'>Details</span>
            </button>
            <div class='tooltip__content'>
              <svg width="16" height="18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <symbol id='shield-icon'>
                  <g clip-path="url(#a)">
                    <path d="m5.666 9.196 1.556 1.81 3.111-3.62m4.37-3.635c-.16.01-.32.015-.481.015C11.832 3.766 9.651 2.72 8 1 6.348 2.72 4.168 3.766 1.778 3.766a8.15 8.15 0 0 1-.481-.015A12.57 12.57 0 0 0 1 6.481C1 11.541 3.974 15.794 8 17c4.025-1.206 7-5.458 7-10.519 0-.943-.104-1.857-.297-2.73Z" stroke="#2D9CDB" stroke-width="1.535" stroke-linecap="round" stroke-linejoin="round"/>
                  </g>
                  <defs>
                    <clipPath id="a">
                      <path fill="#fff" d="M0 0h16v18H0z"/>
                    </clipPath>
                  </defs>
                </symbol>
                <use href='#shield-icon' />
              </svg>

              <div class='flow'>
                <p class='title'>
                  Personal Details
                </p>

                <p class='description'>
                  Partner can process your names, DOB, and gender.
                </p>
              </div>
            </div>
          </div>
        </li>

        <li class='processing-list__items'>
          <svg width="23" height="23" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="22.723" height="22.575" rx="4.537" fill="#2F8D60"/>
            <path fill-rule="evenodd" clip-rule="evenodd" d="M15.71 8.518a.286.286 0 0 0 .054.082c.054.055.054.164.054.218v6.546c0 .927-.709 1.636-1.636 1.636H7.636C6.71 17 6 16.29 6 15.364V6.636C6 5.71 6.71 5 7.636 5H12c.055 0 .164 0 .218.055.055 0 .11.054.164.109l3.273 3.272a.284.284 0 0 1 .054.082Zm-1.746-.245-1.418-1.418v1.418h1.418Zm.218 7.636H7.636c-.327 0-.545-.218-.545-.545V6.636c0-.327.218-.545.545-.545h3.818v2.727c0 .327.219.546.546.546h2.727v6c0 .327-.218.545-.545.545Zm-1.09-3.818c.326 0 .544-.218.544-.545 0-.328-.218-.546-.545-.546H8.727c-.327 0-.545.218-.545.546 0 .327.218.545.545.545h4.364Zm.544 1.636c0 .328-.218.546-.545.546H8.727c-.327 0-.545-.218-.545-.546 0-.327.218-.545.545-.545h4.364c.327 0 .546.218.546.545ZM8.727 8.818c-.327 0-.545.218-.545.546 0 .327.218.545.545.545h1.091c.328 0 .546-.218.546-.545 0-.328-.218-.546-.546-.546h-1.09Z" fill="#fff"/>
          </svg>
          <p>
            Process your contact information
          </p>
          <div class='tooltip'>
            <button class='tooltip__trigger' type='button' data-type='icon'>
              <svg width="17" height="17" fill="none" xmlns="http://www.w3.org/2000/svg">
                <use href='#info-icon' />
              </svg>
              <span class='visually-hidden'>Details</span>
            </button>
            <div class='tooltip__content'>
              <svg width="16" height="18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <use href='#shield-icon' />
              </svg>

              <div class='flow'>
                <p class='title'>
                  Contact Information
                </p>

                <p class='description'>
                  Partner can process your phone numbers and address
                </p>
              </div>
            </div>
          </div>
        </li>

        <li class='processing-list__items'>
          <svg width="23" height="23" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="22.723" height="22.575" rx="4.537" fill="#2F4F8D"/>
            <path fill-rule="evenodd" clip-rule="evenodd" d="M15.16 9.408a.238.238 0 0 1-.045-.067c-.011-.023-.023-.046-.045-.068l-3.187-3.167c-.046-.045-.091-.09-.137-.09-.045-.045-.136-.045-.182-.045H8.377c-.774 0-1.366.588-1.366 1.357v7.237c0 .769.592 1.357 1.366 1.357h5.463c.774 0 1.366-.588 1.366-1.357V9.589c0-.045 0-.135-.045-.18Zm-3.14-1.9 1.638 1.629H12.02V7.509Zm-3.643 7.51h5.464c.273 0 .455-.182.455-.453v-4.523h-2.732c-.273 0-.455-.181-.455-.453V6.875H8.377c-.273 0-.455.181-.455.453v7.237c0 .271.182.452.455.452Z" fill="#fff"/>
          </svg>
          <p>
            Process your document information
          </p>
          <div class='tooltip'>
            <button class='tooltip__trigger' type='button' data-type='icon'>
              <svg width="17" height="17" fill="none" xmlns="http://www.w3.org/2000/svg">
                <use href='#info-icon' />
              </svg>
              <span class='visually-hidden'>Details</span>
            </button>
            <div class='tooltip__content'>
              <svg width="16" height="18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <use href='#shield-icon' />
              </svg>

              <div class='flow'>
                <p class='title'>
                  Document Information
                </p>

                <p class='description'>
                  Partner can process your Photo, ID expiration date, country of issuance, and document number.
                </p>
              </div>
            </div>
          </div>
        </li>
      </ul>

      <section class='callout | flow center' style='--flow-space: 2.5rem; margin: var(--flow-space) auto;'>
        <p>
          You can view <span class='theme'>${this.partnerName}</span>'s privacy policy
          <a class='theme' href='${this.partnerPolicyURL}' rel='noreferer noopener' target='_blank'>here</a>
        </p>

        <p style='--flow-space: .75rem'>
          By choosing "Allow",
          you grant
          <span class='theme'>${this.partnerName}</span>
          consent to process your personal data
          to offer you this service
        </p>
      </section>

      <section class='flow' style='--flow-space: 2.5rem'>
        <button id='allow' data-variant='solid'>
          Allow
        </button>

        <button id='cancel' data-variant='outline' style='--flow-space: 1.5rem'>
          Cancel
        </button>
      </section>
    </div>

    <totp-consent
      hidden
      base-url='${this.baseUrl}'
      country='${this.country}'
      id-hint='${this.idHint}'
      id-regex='${this.idRegex}'
      id-type='${this.idType}'
      id-type-label='${this.idTypeLabel}'
      partner-id='${this.partnerId}'
      partner-name='${this.partnerName}'
      token='${this.token}'
    >
    </totp-consent>

    <div hidden id='consent-rejected-screen' class='flow'>
      <section class='flow center'>
        <svg xmlns="http://www.w3.org/2000/svg" width="185" height="138" fill="none">
          <g filter="url(#a)">
            <path fill="url(#b)" d="M115.503 88.266H70.86a3.443 3.443 0 0 1-3.445-3.444V23.59a3.443 3.443 0 0 1 3.445-3.444h44.643a3.443 3.443 0 0 1 3.444 3.444v61.232a3.443 3.443 0 0 1-3.444 3.444Z"/>
          </g>
          <path fill="#D5DDEA" d="M98.982 71.746H87.38a2.33 2.33 0 0 1-2.334-2.334 2.33 2.33 0 0 1 2.334-2.334h11.603a2.33 2.33 0 0 1 2.334 2.334 2.33 2.33 0 0 1-2.334 2.334Zm5.326 5.054H82.032c-.68 0-1.224-.544-1.224-1.224 0-.68.544-1.224 1.224-1.224h22.276c.68 0 1.224.544 1.224 1.224 0 .657-.544 1.223-1.224 1.223Z"/>
          <path fill="#D9DEEA" d="M108.41 44.439c0 4.578-2.017 8.68-5.213 11.467a15.186 15.186 0 0 1-10.016 3.739 15.09 15.09 0 0 1-10.016-3.762 15.17 15.17 0 0 1-5.212-11.467c0-8.407 6.82-15.228 15.228-15.228 8.407 0 15.229 6.844 15.229 15.251Z"/>
          <path fill="#fff" d="M103.197 55.906a15.187 15.187 0 0 1-10.016 3.739 15.09 15.09 0 0 1-10.016-3.762c1.11-.43 2.56-.997 4.51-1.79a1.87 1.87 0 0 0 .996-.952 1.8 1.8 0 0 0 .159-.77v-3.649c-.068-.068-.113-.159-.159-.227a3.648 3.648 0 0 1-.589-1.586l-.317-.158c-.93.226-.861-.771-1.11-2.697-.091-.793.022-.952.385-1.088l.294-.408c-1.813-4.079-.906-6.64.884-7.546-.59-1.292-.635-1.768-.635-1.768s3.808.635 5.1.386c1.654-.34 4.214.067 5.166 2.266 1.586.611 2.198 1.631 2.334 2.696.136.998-.158 2.085-.453 2.924a1.077 1.077 0 0 1-.068.158c0 .023-.023.046-.023.068-.045.114-.068.204-.113.295-.023.045-.023.09-.045.136-.023.09-.068.181-.09.25 0 .022 0 .022-.023.044l-.069.204a2.466 2.466 0 0 1-.068.227c.023.023.023.068.046.09.25.114.34.34.25 1.043-.228 1.836-.16 2.946-1.111 2.697l-.839 1.45c-.022.159-.045.25-.068.34-.022.272-.022.816-.022 3.807 0 .363.113.703.294.997.204.317.499.59.861.748 0 0 .023 0 .023.023 1.971.838 3.422 1.382 4.532 1.813Z"/>
          <path fill="url(#c)" d="M99.254 42.92c.068-.453-.136-1.042-.294-1.427-.023-.068-.068-.136-.091-.204-.725-1.45-2.357-2.062-3.898-2.153-3.943-.204-4.328.544-5.552-.589.386.567.408 1.496-.181 2.629-.408.793-1.201 1.155-1.926 1.382-1.813-4.079-.907-6.64.883-7.546-.589-1.292-.634-1.768-.634-1.768s3.807.635 5.099.386c1.654-.34 4.215.067 5.167 2.266 1.586.611 2.198 1.631 2.334 2.696.272 1.7-.725 3.58-.907 4.329Z"/>
          <path fill="url(#d)" d="M97.804 53.368v.702h-9.156v-.929a1.8 1.8 0 0 0 .16-.77v-3.649c-.069-.068-.114-.159-.16-.227v-.226c.204.34.454.634.748.906l2.856 2.017c.657.567 1.631.567 2.311.023l2.674-2.402c.09-.068.181-.159.272-.25-.023.272-.023.816-.023 3.807.046.363.136.703.318.998Z"/>
          <g filter="url(#e)">
            <path fill="url(#f)" d="M54.86 77.728H26.15a3.443 3.443 0 0 1-3.445-3.444V34.128a3.443 3.443 0 0 1 3.445-3.445h28.71a3.443 3.443 0 0 1 3.444 3.445v40.179a3.424 3.424 0 0 1-3.444 3.421Z"/>
          </g>
          <path fill="#D5DDEA" d="M44.504 66.33h-8.022a1.615 1.615 0 0 1-1.609-1.61c0-.883.725-1.608 1.609-1.608h8.022c.884 0 1.61.725 1.61 1.609s-.726 1.609-1.61 1.609Zm3.694 3.49H32.811a.837.837 0 0 1-.838-.839c0-.476.385-.838.838-.838h15.387c.476 0 .839.385.839.838a.851.851 0 0 1-.839.839Z"/>
          <path fill="#D9DEEA" d="M51.008 47.453a10.52 10.52 0 0 1-3.603 7.931 10.5 10.5 0 0 1-6.912 2.584c-2.651 0-5.076-.975-6.911-2.584a10.52 10.52 0 0 1-3.604-7.931c0-5.801 4.714-10.515 10.515-10.515 5.802 0 10.515 4.714 10.515 10.515Z"/>
          <path fill="#fff" d="M47.405 55.385a10.5 10.5 0 0 1-6.912 2.584c-2.651 0-5.076-.975-6.912-2.584a87.84 87.84 0 0 0 3.105-1.246c.317-.136.544-.363.68-.658.068-.158.113-.34.113-.543v-2.516a.69.69 0 0 1-.113-.158 2.36 2.36 0 0 1-.408-1.088l-.227-.113c-.634.158-.589-.544-.77-1.859-.068-.544.023-.657.25-.748l.203-.271c-1.246-2.833-.612-4.6.612-5.213-.408-.883-.43-1.223-.43-1.223s2.628.43 3.535.272c1.155-.227 2.9.045 3.557 1.563 1.088.43 1.519 1.133 1.61 1.858.09.703-.114 1.428-.295 2.017-.023.046-.023.068-.045.114 0 .022-.023.022-.023.045l-.068.204c-.023.023-.023.068-.045.09-.023.069-.046.114-.068.182v.023c-.023.045-.046.09-.046.136-.022.068-.045.113-.045.158.023.023.023.045.023.068.18.09.226.227.158.703-.158 1.269-.113 2.04-.77 1.858l-.567 1.02c-.022.113-.045.158-.045.249-.023.181-.023.567-.023 2.629 0 .249.068.475.204.68.136.226.34.407.59.498h.022c1.405.59 2.402.974 3.15 1.27Z"/>
          <path fill="url(#g)" d="M44.708 46.41c.046-.317-.09-.702-.204-.997l-.068-.136c-.498-.997-1.631-1.427-2.696-1.473-2.72-.136-2.992.386-3.83-.407.272.407.294 1.02-.113 1.813-.295.543-.839.793-1.315.951-1.246-2.832-.612-4.6.612-5.212-.408-.884-.43-1.224-.43-1.224s2.628.431 3.535.272c1.155-.226 2.9.046 3.557 1.564 1.088.43 1.519 1.133 1.61 1.858.135 1.179-.544 2.47-.658 2.992Z"/>
          <path fill="url(#h)" d="M43.711 53.64v.498H37.39v-.657a1.37 1.37 0 0 0 .113-.544v-2.515a.69.69 0 0 1-.113-.16v-.135c.136.227.317.453.52.612l1.972 1.382a1.264 1.264 0 0 0 1.61.023l1.858-1.654a.689.689 0 0 0 .18-.182c-.022.181-.022.567-.022 2.629 0 .25.068.498.204.703Z"/>
          <g filter="url(#i)">
            <path fill="url(#j)" d="M159.533 77.728h-28.712a3.443 3.443 0 0 1-3.444-3.444V34.128a3.443 3.443 0 0 1 3.444-3.445h28.712a3.443 3.443 0 0 1 3.445 3.445v40.179a3.424 3.424 0 0 1-3.445 3.421Z"/>
          </g>
          <path fill="#D5DDEA" d="M149.177 66.33h-8.022a1.616 1.616 0 0 1-1.609-1.61c0-.883.726-1.608 1.609-1.608h8.022c.884 0 1.609.725 1.609 1.609.023.884-.702 1.609-1.609 1.609Zm3.694 3.49h-15.387a.836.836 0 0 1-.838-.839c0-.476.385-.838.838-.838h15.387c.476 0 .839.385.839.838a.837.837 0 0 1-.839.839Z"/>
          <path fill="#D9DEEA" d="M155.704 47.453c0 3.172-1.405 6.005-3.604 7.931a10.498 10.498 0 0 1-6.911 2.584c-2.652 0-5.076-.975-6.912-2.584a10.52 10.52 0 0 1-3.603-7.931c0-5.801 4.713-10.515 10.515-10.515 5.801 0 10.515 4.714 10.515 10.515Z"/>
          <path fill="#fff" d="M152.101 55.385a10.501 10.501 0 0 1-6.912 2.584c-2.651 0-5.076-.975-6.912-2.584a87.84 87.84 0 0 0 3.105-1.246c.317-.136.544-.363.68-.658.068-.158.113-.34.113-.543v-2.516a.677.677 0 0 1-.113-.158 2.352 2.352 0 0 1-.408-1.088l-.227-.113c-.634.158-.589-.544-.77-1.859-.068-.544.022-.657.249-.748l.204-.271c-1.246-2.833-.612-4.6.612-5.213-.408-.883-.431-1.223-.431-1.223s2.629.43 3.535.272c1.156-.227 2.901.045 3.558 1.563 1.088.43 1.519 1.133 1.609 1.858.091.703-.113 1.428-.294 2.017-.023.046-.023.068-.046.114 0 .022-.022.022-.022.045l-.068.204c-.023.023-.023.068-.046.09-.022.069-.045.114-.068.182v.023c-.022.045-.045.09-.045.136-.023.068-.045.113-.045.158.022.023.022.045.022.068.182.09.227.227.159.703-.159 1.269-.113 2.04-.77 1.858l-.567 1.02c-.023.113-.045.158-.045.249-.023.181-.023.567-.023 2.629 0 .249.068.475.204.68.136.226.34.407.589.498h.023c1.382.59 2.379.974 3.15 1.27Z"/>
          <path fill="url(#k)" d="M149.382 46.41c.045-.317-.091-.702-.204-.997l-.068-.136c-.499-.997-1.632-1.427-2.697-1.473-2.719-.136-2.991.386-3.83-.407.272.407.295 1.02-.113 1.813-.295.543-.839.793-1.315.951-1.246-2.832-.611-4.6.612-5.212-.408-.884-.43-1.224-.43-1.224s2.628.431 3.535.272c1.156-.226 2.901.046 3.558 1.564 1.088.43 1.518 1.133 1.609 1.858.136 1.179-.521 2.47-.657 2.992Z"/>
          <path fill="url(#l)" d="M148.385 53.64v.498h-6.323v-.657a1.37 1.37 0 0 0 .113-.544v-2.515a.71.71 0 0 1-.113-.16v-.135c.136.227.317.453.521.612l1.972 1.382a1.264 1.264 0 0 0 1.609.023l1.858-1.654a.683.683 0 0 0 .181-.182c-.022.181-.022.567-.022 2.629 0 .25.068.498.204.703Z"/>
          <path fill="#F97B6A" d="M154.163 120.944 125.496 92.3l6.572-6.572 28.644 28.667-6.549 6.549Z"/>
          <path fill="#F97B6A" d="m168.44 135.334-21.982-21.982a4.72 4.72 0 0 1 0-6.662 4.719 4.719 0 0 1 6.663 0l21.981 21.981a4.719 4.719 0 0 1 0 6.663 4.72 4.72 0 0 1-6.662 0Z"/>
          <path fill="url(#m)" d="m166.876 136.739-28.282-28.282c-.657-.657-.657-1.722 0-2.402l7.229-7.229a1.71 1.71 0 0 1 2.403 0l28.281 28.282c.657.657.657 1.722 0 2.402l-7.229 7.229c-.68.657-1.745.657-2.402 0Z"/>
          <path fill="url(#n)" d="M93.045 0c-30.004 0-54.32 24.316-54.32 54.32 0 29.98 24.316 54.319 54.297 54.319 30.004 0 54.32-24.316 54.32-54.32C147.342 24.316 123.026 0 93.045 0Zm0 98.577c-24.09 0-43.6-19.829-43.6-44.28 0-24.452 19.51-44.258 43.6-44.258 24.089 0 43.6 19.829 43.6 44.28 0 24.452-19.534 44.258-43.6 44.258Z"/>
          <defs>
            <linearGradient id="b" x1="93.164" x2="93.164" y1="18.57" y2="89.001" gradientUnits="userSpaceOnUse">
              <stop stop-color="#FDFEFF"/>
              <stop offset=".996" stop-color="#ECF0F5"/>
            </linearGradient>
            <linearGradient id="c" x1="86.316" x2="100.21" y1="38.084" y2="38.084" gradientUnits="userSpaceOnUse">
              <stop stop-color="#B0BACC"/>
              <stop offset="1" stop-color="#969EAE"/>
            </linearGradient>
            <linearGradient id="d" x1="93.229" x2="93.229" y1="54.105" y2="50.91" gradientUnits="userSpaceOnUse">
              <stop stop-color="#fff"/>
              <stop offset="1" stop-color="#E2E5EC"/>
            </linearGradient>
            <linearGradient id="f" x1="40.493" x2="40.493" y1="29.595" y2="78.236" gradientUnits="userSpaceOnUse">
              <stop stop-color="#FDFEFF"/>
              <stop offset=".996" stop-color="#ECF0F5"/>
            </linearGradient>
            <linearGradient id="g" x1="35.801" x2="45.385" y1="43.069" y2="43.069" gradientUnits="userSpaceOnUse">
              <stop stop-color="#B0BACC"/>
              <stop offset="1" stop-color="#969EAE"/>
            </linearGradient>
            <linearGradient id="h" x1="40.552" x2="40.552" y1="54.162" y2="51.953" gradientUnits="userSpaceOnUse">
              <stop stop-color="#fff"/>
              <stop offset="1" stop-color="#E2E5EC"/>
            </linearGradient>
            <linearGradient id="j" x1="145.166" x2="145.166" y1="29.595" y2="78.236" gradientUnits="userSpaceOnUse">
              <stop stop-color="#FDFEFF"/>
              <stop offset=".996" stop-color="#ECF0F5"/>
            </linearGradient>
            <linearGradient id="k" x1="140.474" x2="150.059" y1="43.069" y2="43.069" gradientUnits="userSpaceOnUse">
              <stop stop-color="#B0BACC"/>
              <stop offset="1" stop-color="#969EAE"/>
            </linearGradient>
            <linearGradient id="l" x1="145.225" x2="145.225" y1="54.162" y2="51.953" gradientUnits="userSpaceOnUse">
              <stop stop-color="#fff"/>
              <stop offset="1" stop-color="#E2E5EC"/>
            </linearGradient>
            <linearGradient id="m" x1="138.084" x2="177.007" y1="117.787" y2="117.787" gradientUnits="userSpaceOnUse">
              <stop stop-color="#FF6551"/>
              <stop offset="1" stop-color="#FF9F92"/>
            </linearGradient>
            <linearGradient id="n" x1="38.676" x2="147.361" y1="54.331" y2="54.331" gradientUnits="userSpaceOnUse">
              <stop stop-color="#FF6551"/>
              <stop offset="1" stop-color="#FF9F92"/>
            </linearGradient>
            <filter id="a" width="95.532" height="112.12" x="45.415" y="9.146" color-interpolation-filters="sRGB" filterUnits="userSpaceOnUse">
              <feFlood flood-opacity="0" result="BackgroundImageFix"/>
              <feColorMatrix in="SourceAlpha" result="hardAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
              <feOffset dy="11"/>
              <feGaussianBlur stdDeviation="11"/>
              <feColorMatrix values="0 0 0 0 0.397708 0 0 0 0 0.47749 0 0 0 0 0.575 0 0 0 0.27 0"/>
              <feBlend in2="BackgroundImageFix" result="effect1_dropShadow_1211:246"/>
              <feBlend in="SourceGraphic" in2="effect1_dropShadow_1211:246" result="shape"/>
            </filter>
            <filter id="e" width="79.601" height="91.045" x=".704" y="19.683" color-interpolation-filters="sRGB" filterUnits="userSpaceOnUse">
              <feFlood flood-opacity="0" result="BackgroundImageFix"/>
              <feColorMatrix in="SourceAlpha" result="hardAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
              <feOffset dy="11"/>
              <feGaussianBlur stdDeviation="11"/>
              <feColorMatrix values="0 0 0 0 0.397708 0 0 0 0 0.47749 0 0 0 0 0.575 0 0 0 0.27 0"/>
              <feBlend in2="BackgroundImageFix" result="effect1_dropShadow_1211:246"/>
              <feBlend in="SourceGraphic" in2="effect1_dropShadow_1211:246" result="shape"/>
            </filter>
            <filter id="i" width="79.601" height="91.045" x="105.377" y="19.683" color-interpolation-filters="sRGB" filterUnits="userSpaceOnUse">
              <feFlood flood-opacity="0" result="BackgroundImageFix"/>
              <feColorMatrix in="SourceAlpha" result="hardAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
              <feOffset dy="11"/>
              <feGaussianBlur stdDeviation="11"/>
              <feColorMatrix values="0 0 0 0 0.397708 0 0 0 0 0.47749 0 0 0 0 0.575 0 0 0 0.27 0"/>
              <feBlend in2="BackgroundImageFix" result="effect1_dropShadow_1211:246"/>
              <feBlend in="SourceGraphic" in2="effect1_dropShadow_1211:246" result="shape"/>
            </filter>
          </defs>
        </svg>

        <h1 style='font-size: 36px; line-height: 1; font-weight: 500; --flow-space: 1.5rem'>
          Consent Denied
        </h1>

        <p class='color-grey' style='--flow-space: 1rem'>
          We cannot verify you without your consent
        </p>

        <p>
          Wish to correct that?
        </p>
      </section>

      <button data-variant='solid' type='button' id='back-to-consent'>
        <svg style='transform: rotate(.5turn);' width="25" height="24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M7 12h11m0 0-4.588-4M18 12l-4.588 4" stroke="#fff" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        Go Back
      </button>

      <button data-variant='outline' id='confirm-consent-rejection' style='--flow-space: 1rem; border-radius: 2rem'>
        No, Cancel Verification
      </button>

      <p class='center credits'>
        <span class='visually-hidden'>Powered by SmileID</span>
        <svg aria-hidden='true' viewBox="0 0 90 9" fill="none" xmlns="http://www.w3.org/2000/svg">
          <symbol id='attribution'>
            <path d="M0.544 7V1.4H2.616C3.064 1.4 3.43467 1.47467 3.728 1.624C4.02133 1.77333 4.24 1.97867 4.384 2.24C4.528 2.50133 4.6 2.79467 4.6 3.12C4.6 3.42933 4.53067 3.71467 4.392 3.976C4.25333 4.232 4.03733 4.44 3.744 4.6C3.45067 4.75467 3.07467 4.832 2.616 4.832H1.568V7H0.544ZM1.568 4H2.552C2.90933 4 3.16533 3.92267 3.32 3.768C3.48 3.608 3.56 3.392 3.56 3.12C3.56 2.84267 3.48 2.62667 3.32 2.472C3.16533 2.312 2.90933 2.232 2.552 2.232H1.568V4ZM7.08025 7.096C6.69625 7.096 6.34958 7.008 6.04025 6.832C5.73625 6.656 5.49358 6.41333 5.31225 6.104C5.13625 5.78933 5.04825 5.42667 5.04825 5.016C5.04825 4.60533 5.13892 4.24533 5.32025 3.936C5.50158 3.62133 5.74425 3.376 6.04825 3.2C6.35758 3.024 6.70425 2.936 7.08825 2.936C7.46692 2.936 7.80825 3.024 8.11225 3.2C8.42158 3.376 8.66425 3.62133 8.84025 3.936C9.02158 4.24533 9.11225 4.60533 9.11225 5.016C9.11225 5.42667 9.02158 5.78933 8.84025 6.104C8.66425 6.41333 8.42158 6.656 8.11225 6.832C7.80292 7.008 7.45892 7.096 7.08025 7.096ZM7.08025 6.208C7.34692 6.208 7.57892 6.10933 7.77625 5.912C7.97358 5.70933 8.07225 5.41067 8.07225 5.016C8.07225 4.62133 7.97358 4.32533 7.77625 4.128C7.57892 3.92533 7.34958 3.824 7.08825 3.824C6.81625 3.824 6.58158 3.92533 6.38425 4.128C6.19225 4.32533 6.09625 4.62133 6.09625 5.016C6.09625 5.41067 6.19225 5.70933 6.38425 5.912C6.58158 6.10933 6.81358 6.208 7.08025 6.208ZM10.6632 7L9.50319 3.032H10.5192L11.2072 5.888L12.0072 3.032H13.1432L13.9432 5.888L14.6392 3.032H15.6552L14.4872 7H13.4232L12.5752 4.032L11.7272 7H10.6632ZM18.0886 7.096C17.6886 7.096 17.334 7.01067 17.0246 6.84C16.7153 6.66933 16.4726 6.42933 16.2966 6.12C16.1206 5.81067 16.0326 5.45333 16.0326 5.048C16.0326 4.63733 16.118 4.272 16.2886 3.952C16.4646 3.632 16.7046 3.384 17.0086 3.208C17.318 3.02667 17.6806 2.936 18.0966 2.936C18.486 2.936 18.83 3.02133 19.1286 3.192C19.4273 3.36267 19.6593 3.59733 19.8246 3.896C19.9953 4.18933 20.0806 4.51733 20.0806 4.88C20.0806 4.93867 20.078 5 20.0726 5.064C20.0726 5.128 20.07 5.19467 20.0646 5.264H17.0486C17.07 5.57333 17.1766 5.816 17.3686 5.992C17.566 6.168 17.8033 6.256 18.0806 6.256C18.2886 6.256 18.462 6.21067 18.6006 6.12C18.7446 6.024 18.8513 5.90133 18.9206 5.752H19.9606C19.886 6.00267 19.7606 6.232 19.5846 6.44C19.414 6.64267 19.2006 6.80267 18.9446 6.92C18.694 7.03733 18.4086 7.096 18.0886 7.096ZM18.0966 3.768C17.846 3.768 17.6246 3.84 17.4326 3.984C17.2406 4.12267 17.118 4.336 17.0646 4.624H19.0406C19.0246 4.36267 18.9286 4.15467 18.7526 4C18.5766 3.84533 18.358 3.768 18.0966 3.768ZM20.9419 7V3.032H21.8539L21.9499 3.776C22.0939 3.52 22.2885 3.31733 22.5339 3.168C22.7845 3.01333 23.0779 2.936 23.4139 2.936V4.016H23.1259C22.9019 4.016 22.7019 4.05067 22.5259 4.12C22.3499 4.18933 22.2112 4.30933 22.1099 4.48C22.0139 4.65067 21.9659 4.888 21.9659 5.192V7H20.9419ZM25.9714 7.096C25.5714 7.096 25.2168 7.01067 24.9074 6.84C24.5981 6.66933 24.3554 6.42933 24.1794 6.12C24.0034 5.81067 23.9154 5.45333 23.9154 5.048C23.9154 4.63733 24.0008 4.272 24.1714 3.952C24.3474 3.632 24.5874 3.384 24.8914 3.208C25.2008 3.02667 25.5634 2.936 25.9794 2.936C26.3688 2.936 26.7128 3.02133 27.0114 3.192C27.3101 3.36267 27.5421 3.59733 27.7074 3.896C27.8781 4.18933 27.9634 4.51733 27.9634 4.88C27.9634 4.93867 27.9608 5 27.9554 5.064C27.9554 5.128 27.9528 5.19467 27.9474 5.264H24.9314C24.9528 5.57333 25.0594 5.816 25.2514 5.992C25.4488 6.168 25.6861 6.256 25.9634 6.256C26.1714 6.256 26.3448 6.21067 26.4834 6.12C26.6274 6.024 26.7341 5.90133 26.8034 5.752H27.8434C27.7688 6.00267 27.6434 6.232 27.4674 6.44C27.2968 6.64267 27.0834 6.80267 26.8274 6.92C26.5768 7.03733 26.2914 7.096 25.9714 7.096ZM25.9794 3.768C25.7288 3.768 25.5074 3.84 25.3154 3.984C25.1234 4.12267 25.0008 4.336 24.9474 4.624H26.9234C26.9074 4.36267 26.8114 4.15467 26.6354 4C26.4594 3.84533 26.2408 3.768 25.9794 3.768ZM30.6487 7.096C30.2754 7.096 29.942 7.00533 29.6487 6.824C29.3554 6.64267 29.1234 6.39467 28.9527 6.08C28.782 5.76533 28.6967 5.408 28.6967 5.008C28.6967 4.608 28.782 4.25333 28.9527 3.944C29.1234 3.62933 29.3554 3.384 29.6487 3.208C29.942 3.02667 30.2754 2.936 30.6487 2.936C30.9474 2.936 31.2087 2.992 31.4327 3.104C31.6567 3.216 31.838 3.37333 31.9767 3.576V1.24H33.0007V7H32.0887L31.9767 6.432C31.8487 6.608 31.678 6.76267 31.4647 6.896C31.2567 7.02933 30.9847 7.096 30.6487 7.096ZM30.8647 6.2C31.1954 6.2 31.4647 6.09067 31.6727 5.872C31.886 5.648 31.9927 5.36267 31.9927 5.016C31.9927 4.66933 31.886 4.38667 31.6727 4.168C31.4647 3.944 31.1954 3.832 30.8647 3.832C30.5394 3.832 30.27 3.94133 30.0567 4.16C29.8434 4.37867 29.7367 4.66133 29.7367 5.008C29.7367 5.35467 29.8434 5.64 30.0567 5.864C30.27 6.088 30.5394 6.2 30.8647 6.2ZM38.3017 7.096C38.003 7.096 37.7417 7.04 37.5177 6.928C37.2937 6.816 37.1124 6.65867 36.9737 6.456L36.8617 7H35.9497V1.24H36.9737V3.6C37.1017 3.424 37.2697 3.26933 37.4777 3.136C37.691 3.00267 37.9657 2.936 38.3017 2.936C38.675 2.936 39.0084 3.02667 39.3017 3.208C39.595 3.38933 39.827 3.63733 39.9977 3.952C40.1684 4.26667 40.2537 4.624 40.2537 5.024C40.2537 5.424 40.1684 5.78133 39.9977 6.096C39.827 6.40533 39.595 6.65067 39.3017 6.832C39.0084 7.008 38.675 7.096 38.3017 7.096ZM38.0857 6.2C38.411 6.2 38.6804 6.09067 38.8937 5.872C39.107 5.65333 39.2137 5.37067 39.2137 5.024C39.2137 4.67733 39.107 4.392 38.8937 4.168C38.6804 3.944 38.411 3.832 38.0857 3.832C37.755 3.832 37.483 3.944 37.2697 4.168C37.0617 4.38667 36.9577 4.66933 36.9577 5.016C36.9577 5.36267 37.0617 5.648 37.2697 5.872C37.483 6.09067 37.755 6.2 38.0857 6.2ZM41.3051 8.76L42.2251 6.736H41.9851L40.4411 3.032H41.5531L42.6651 5.824L43.8251 3.032H44.9131L42.3931 8.76H41.3051Z" fill="#001096"/>
            <g clipPath="url(#clip0_1923_23296)">
                <path d="M58.5141 6.02913C58.5644 6.37005 58.8092 6.77098 59.4839 6.77098C60.0578 6.77098 60.336 6.56623 60.336 6.23338C60.336 5.90053 60.142 5.75579 59.788 5.71292L58.5988 5.58482C57.5612 5.47387 56.9539 4.86819 56.9539 3.87872C56.9539 2.77779 57.7801 2.04401 59.4335 2.04401C61.2135 2.04401 61.9221 2.88874 61.9894 3.88679H60.3195C60.2687 3.51157 59.965 3.27253 59.442 3.27253C58.9783 3.27253 58.6577 3.44349 58.6577 3.75062C58.6577 3.99774 58.8097 4.18534 59.2141 4.21964L60.1844 4.30486C61.4918 4.41582 62.0397 5.04672 62.0397 6.0962C62.0397 7.21377 61.3477 7.999 59.4504 7.999C57.5532 7.999 56.9534 7.02667 56.8691 6.02862H58.5141V6.02913Z" fill="#001096" />
                <path d="M70.1965 5.28736V7.85484H68.5431V5.56019C68.5431 5.09925 68.3746 4.80069 67.9194 4.80069C67.4212 4.80069 67.2108 5.11639 67.2108 5.78159V7.85484H65.5824V5.56019C65.5824 5.09925 65.4133 4.80069 64.9581 4.80069C64.4605 4.80069 64.2496 5.11639 64.2496 5.78159V7.85484H62.5967V3.58932H64.2496V4.24644C64.5113 3.75171 64.9581 3.45265 65.6586 3.45265C66.3592 3.45265 66.8309 3.7855 67.0587 4.35689C67.3285 3.80265 67.7842 3.45265 68.5351 3.45265C69.6735 3.45265 70.197 4.16928 70.197 5.28736H70.1965Z" fill="#001096" />
                <path d="M70.9785 3.8535V2.18118H72.6319V3.8535H70.9785ZM70.9785 7.85476V4.2504H72.6319V7.85476H70.9785Z" fill="#001096" />
                <path d="M73.4121 7.85475V2.18167H75.065V7.85525H73.4121V7.85475Z" fill="#001096" />
                <path d="M78.7264 6.53958H80.3579C80.1968 7.3243 79.5696 7.99151 78.0179 7.99151C76.2294 7.99151 75.6221 6.8568 75.6221 5.71351C75.6221 4.48499 76.3391 3.45265 78.0179 3.45265C79.8653 3.45265 80.3629 4.59594 80.3629 5.77302C80.3629 5.91776 80.3539 6.05443 80.3374 6.13966H77.2336C77.3178 6.68583 77.5881 6.89059 78.0518 6.89059C78.3729 6.89059 78.6083 6.73526 78.7269 6.53908L78.7264 6.53958ZM77.2416 5.21877H78.8022C78.7519 4.77497 78.5404 4.52785 78.0428 4.52785C77.5791 4.52785 77.3348 4.70689 77.2416 5.21877Z" fill="#001096" />
                <path d="M83.5907 7.85476H81.8994L81.9034 2.18118H83.5902L83.5912 7.85476H83.5907Z" fill="#001096" />
                <path d="M89.9995 5.00535C89.9995 6.46434 89.1474 7.85475 87.3345 7.85475H84.3652V2.18167H87.3345C89.1479 2.18167 89.9995 3.54686 89.9995 5.00535ZM86.9376 6.5067C87.8401 6.5067 88.2364 5.99482 88.2364 5.00535C88.2364 4.01588 87.8226 3.52971 86.9376 3.52971H86.06V6.5067H86.9376Z" fill="#001096" />
                <path d="M52.2123 3.88737H48V7.86846H52.2123V3.88737Z" fill="#001096" />
                <path d="M53.2359 0C53.2165 0 53.1975 0.00201727 53.1786 0.00252159C53.1591 0.00252159 53.1402 0 53.1207 0C52.0457 0 51.0869 0.708567 51.0869 2.27044V3.8888H55.2882V2.27044C55.2882 0.708567 54.3174 0 53.2359 0Z" fill="#FF9B00" />
            </g>
            <defs>
                <clipPath id="clip0_1923_23296">
                    <rect width="42" height="8" fill="white" transform="translate(48)" />
                </clipPath>
            </defs>
          </symbol>
          <use href='#attribution' />
        </svg>
      </p>
    </div>
  `;
  }
  var EndUserConsent = class extends HTMLElement {
    constructor() {
      super();
      this.idRequiresTotpConsent = ["BVN_MFA"];
      this.templateString = templateString.bind(this);
      this.render = () => {
        return this.templateString();
      };
      this.attachShadow({ mode: "open" });
    }
    connectedCallback() {
      this.pages = [];
      const template = document.createElement("template");
      template.innerHTML = this.render();
      this.shadowRoot.appendChild(template.content.cloneNode(true));
      this.consentScreen = this.shadowRoot.querySelector("#consent-screen");
      this.totpConsentApp = this.shadowRoot.querySelector("totp-consent");
      this.consentRejectedScreen = this.shadowRoot.querySelector(
        "#consent-rejected-screen"
      );
      this.allowButton = this.shadowRoot.querySelector("#allow");
      this.rejectButton = this.shadowRoot.querySelector("#cancel");
      this.backToConsentButton = this.shadowRoot.querySelector("#back-to-consent");
      this.confirmConsentRejectionButton = this.shadowRoot.querySelector(
        "#confirm-consent-rejection"
      );
      this.backButton = this.shadowRoot.querySelector("#back-button");
      const CloseIframeButtons = this.shadowRoot.querySelectorAll(".close-iframe");
      this.allowButton.addEventListener(
        "click",
        (e) => this.handleConsentGrant(e)
      );
      this.rejectButton.addEventListener(
        "click",
        (e) => this.handleConsentGrant(e)
      );
      this.backToConsentButton.addEventListener(
        "click",
        () => this.setActiveScreen(this.consentScreen)
      );
      this.confirmConsentRejectionButton.addEventListener(
        "click",
        (e) => this.handleConsentRejection(e)
      );
      this.totpConsentApp.addEventListener(
        "SmileIdentity::ConsentDenied::TOTP::ContactMethodsOutdated",
        (e) => this.handleTotpConsentEvents(e)
      );
      this.totpConsentApp.addEventListener(
        "SmileIdentity::ConsentGranted::TOTP",
        (e) => this.handleTotpConsentEvents(e)
      );
      this.totpConsentApp.addEventListener(
        "SmileIdentity::ConsentDenied::Back",
        (e) => this.handleBackEvents(e)
      );
      this.backButton.addEventListener("click", (e) => {
        this.handleBackEvents(e);
      });
      CloseIframeButtons.forEach((button) => {
        button.addEventListener(
          "click",
          () => {
            this.closeWindow();
          },
          false
        );
      });
      this.activeScreen = this.consentScreen;
    }
    setActiveScreen(screen) {
      this.activeScreen.hidden = true;
      screen.hidden = false;
      this.activeScreen = screen;
    }
    get baseUrl() {
      return this.getAttribute("base-url");
    }
    get country() {
      return this.getAttribute("country");
    }
    get demoMode() {
      return !!this.hasAttribute("demo-mode");
    }
    get hideBack() {
      return this.hasAttribute("hide-back-to-host");
    }
    get idHint() {
      return this.getAttribute("id-hint") || "Your BVN should be 11 digits long";
    }
    get idRegex() {
      return this.getAttribute("id-regex");
    }
    get idType() {
      return this.getAttribute("id-type");
    }
    get idTypeLabel() {
      return this.getAttribute("id-type-label");
    }
    get partnerId() {
      return this.getAttribute("partner-id");
    }
    get partnerName() {
      return this.getAttribute("partner-name");
    }
    get partnerLogoURL() {
      return this.getAttribute("partner-logo");
    }
    get partnerPolicyURL() {
      return this.getAttribute("policy-url");
    }
    get themeColor() {
      return this.getAttribute("theme-color") || "#043C93";
    }
    get token() {
      return this.getAttribute("token");
    }
    handleConsentGrant(e) {
      const granted = e.target === this.allowButton;
      if (granted) {
        if (this.idRequiresTotpConsent.includes(this.idType)) {
          this.setActiveScreen(this.totpConsentApp);
          this.pages.push(this.consentScreen);
        } else {
          this.dispatchEvent(
            new CustomEvent("SmileIdentity::ConsentGranted", {
              detail: {
                consented: {
                  personal_details: granted,
                  contact_information: granted,
                  document_information: granted
                }
              }
            })
          );
        }
      } else {
        this.setActiveScreen(this.consentRejectedScreen);
      }
    }
    handleConsentRejection() {
      this.dispatchEvent(new CustomEvent("SmileIdentity::ConsentDenied"));
    }
    handleTotpConsentEvents(e) {
      const customEvent = new CustomEvent(e.type, {
        detail: {
          ...e.detail
        }
      });
      this.dispatchEvent(customEvent);
    }
    handleBackEvents() {
      const page = this.pages.pop();
      if (page) {
        this.setActiveScreen(page);
      } else {
        this.dispatchEvent(new CustomEvent("SmileIdentity::Exit"));
      }
    }
    closeWindow() {
      const referenceWindow = window.parent;
      referenceWindow.postMessage("SmileIdentity::Close", "*");
    }
  };
  if ("customElements" in window) {
    window.customElements.define("end-user-consent", EndUserConsent);
  }

  // ../components/totp-consent/src/TotpConsent.js
  var import_validate = __toESM(require_validate());
  function postData(url, data) {
    return fetch(url, {
      method: "POST",
      mode: "cors",
      cache: "no-cache",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify(data)
    });
  }
  function markup() {
    return `
		<style>
			*,
			*::before,
			*::after {
				box-sizing: border-box;
				margin: 0;
				padding: 0;
			}

			:host {
				--flow-space: 1.5rem;

				--color-dark: #404040;
				--color-grey: #555B69;

				--color-success: #1EB244;
				--color-failure: #FFEDEB;
				--color-failure-tint: #F86B58;

				--color-richblue: #043C93;
				--color-theme: ${this.themeColor};

				--color-active: #2D2B2A;
				--color-default: #001096;
				--color-disabled: #848282;
			}

			html {
				font-family: 'DM Sans', sans-serif;
			}

			[hidden] {
				display: none !important;
			}

			[disabled] {
				cursor: not-allowed !important;
			}

			.visually-hidden {
				border: 0;
				clip: rect(1px 1px 1px 1px);
				clip: rect(1px, 1px, 1px, 1px);
				height: auto;
				margin: 0;
				overflow: hidden;
				padding: 0;
				position: absolute;
				white-space: nowrap;
				width: 1px;
			}

			.color-dark {
				color: var(--color-dark);
			}

			.color-grey {
				color: var(--color-grey);
			}

			.flow > * + * {
				margin-top: var(--flow-space);
			}

			.center {
				margin-left: auto;
				margin-right: auto;

				text-align: center;
			}

			h1 {
				font-size: 1.5rem;
				font-weight: 700;
			}

			button, input, select, textarea {
				font: inherit
			}

			label,
			input,
			select,
			textarea {
				--flow-space: .5rem;
				display: block;
				width: 100%;
			}

			input,
			select,
			textarea {
				border: 1px solid #d1d8d6;
				border-radius: .5rem;
				padding: .75rem 1rem;
			}

			button {
				--button-color: var(--color-default);
				--flow-space: 3rem;
				-webkit-appearance: none;
				-moz-appearance: none;
				align-items: center;
				appearance: none;
				background-color: transparent;
				border-radius: 2.5rem;
				border: none;
				color: #ffffff;
				cursor: pointer;
				display: inline-flex;
				font-size: 20px;
				font-weight: 500;
				inline-size: 100%;
				justify-content: center;
				letter-spacing: .05ch;
				line-height: 1;
				padding: 1rem 2.5rem;
				text-align: center;
				text-decoration: none;
			}

			button[data-variant='solid'] {
				background-color: var(--button-color);
				border: 2px solid var(--button-color);
			}

			button[data-variant='outline'] {
				color: var(--button-color);
				border: 2px solid var(--button-color);
			}

			button[data-variant='ghost'] {
				color: var(--button-color);
			}

			button:hover,
			button:focus,
			button:active {
				--button-color: var(--color-active);
			}

			button:disabled {
				--button-color: var(--color-disabled);
			}

			button[data-type='icon'] {
				height: 2rem;
				padding: 0;
				width: 2rem;
				background: transparent;
			}

			input {
				font: inherit;
			}

			fieldset {
				margin: 0;
				border: none;
			}

			.font-weight:bold {
				font-weight: bold;
			}

			.justify-right {
				justify-content: end !important;
			}
			.nav {
				display: flex;
				justify-content: space-between;
			}

			.back-wrapper {
				display: flex;
				align-items: center;
			}

			.back-button-text {
				font-size: 11px;
				line-height: 11px;
				color: rgb(21, 31, 114);
			}

			#error,
			.validation-message {
				color: red;
				text-transform: capitalize;
			}

			.input-group {
				--flow-space: 1.5rem;
				text-align: initial;
			}

			.input-radio {
				--flow-space: 1.5rem;
				background-color: #F8F8F8;
				border-radius: .5rem;
				padding: .625rem 1rem;
				display: flex;
				align-items: center;
			}

			.otp-mode {
				display: flex;
				align-items: center;
				text-align: initial;
			}

			.otp-mode :first-child {
				margin: 0;
				margin-inline-end: 1rem;
			}

			.otp-mode :nth-child(2n) {
				--flow-space: .5rem;
			}

			.input-radio [type='radio'] {
				border-radius: 50%;
				inline-size: 2rem;
				block-size: 2rem;
				margin-inline-end: .5rem;
				background-color: white;
				border: .125rem solid #f5f5f5;
			}

			#totp-token {
				block-size: 3rem;
				inline-size: 20rem;
				max-inline-size: 100%;
				background-color: #F5F5F5;
				border: none;
				border-bottom: 2px solid #2F718D;
				font-size: 1.5rem;
				text-align: center;
				font-weight: 700;
				letter-spacing: 2rem;
				padding: .5rem 1rem;
				margin-inline: auto;
			}

			@keyframes spin {
				0% {
					transform: translate3d(-50%, -50%, 0) rotate(0deg);
				}
				100% {
					transform: translate3d(-50%, -50%, 0) rotate(360deg);
				}
			}

			.spinner {
				animation: 1.5s linear infinite spin;
				animation-play-state: inherit;
				border: solid 5px #cfd0d1;
				border-bottom-color: var(--color-active);
				border-radius: 50%;
				content: "";
				display: block;
				height: 25px;
				width: 25px;
				will-change: transform;
				position: relative;
				top: .675rem;
				left: 1.25rem;
			}
		</style>

		<div class='flow center' id='id-entry'>
			<div class="nav">
				<div class="back-wrapper">
					<button type='button' data-type='icon' id="back-button" class="back-button">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none">
							<path fill="#DBDBC4" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10Z" opacity=".4"/>
							<path fill="#001096" d="M15.5 11.25h-5.19l1.72-1.72c.29-.29.29-.77 0-1.06a.754.754 0 0 0-1.06 0l-3 3c-.29.29-.29.77 0 1.06l3 3c.15.15.34.22.53.22s.38-.07.53-.22c.29-.29.29-.77 0-1.06l-1.72-1.72h5.19c.41 0 .75-.34.75-.75s-.34-.75-.75-.75Z"/>
						</svg>
					</button>
					<div class="back-button-text">Back</div>
				</div>
				<button data-type='icon' type='button' class='close-iframe'>
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none">
						<path fill="#DBDBC4" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10Z" opacity=".4"/>
						<path fill="#91190F" d="m13.06 12 2.3-2.3c.29-.29.29-.77 0-1.06a.754.754 0 0 0-1.06 0l-2.3 2.3-2.3-2.3a.754.754 0 0 0-1.06 0c-.29.29-.29.77 0 1.06l2.3 2.3-2.3 2.3c-.29.29-.29.77 0 1.06.15.15.34.22.53.22s.38-.07.53-.22l2.3-2.3 2.3 2.3c.15.15.34.22.53.22s.38-.07.53-.22c.29-.29.29-.77 0-1.06l-2.3-2.3Z"/>
					</svg>
					<span class='visually-hidden'>Close SmileIdentity Verification frame</span>
				</button>
			</div>
			<h1>
				Enter your ${this.idTypeLabel}
			</h1>

			<form name='id-entry-form' class='flow' novalidate style='--flow-space: 5.5rem'>
				<div id='id-number' class="input-group flow">
					<label class='required' for="id_number">
						${this.idTypeLabel}
					</label>

					<input aria-required='true' id="id_number" name="id_number"
						maxlength='11' placeholder='' />

					<p>
						<small>${this.idHint}</small>
					</p>
				</div>

				<button data-variant='solid' id='query-otp-modes' type='submit'>
					<span class='text'>Continue</span>
					<svg aria-hidden='true' width="25" height="24" fill="none" xmlns="http://www.w3.org/2000/svg">
						<path d="M7 12h11m0 0-4.588-4M18 12l-4.588 4" stroke="#fff" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
					</svg>
					<span hidden class='spinner'></span>
				</button>
			</form>
		</div>

		<div hidden class='flow center' id='select-mode'>
			<div class="nav">
				<div class="back-wrapper">
					<button type='button' data-type='icon' id="back-to-entry-button" class="back-button">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none">
							<path fill="#DBDBC4" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10Z" opacity=".4"/>
							<path fill="#001096" d="M15.5 11.25h-5.19l1.72-1.72c.29-.29.29-.77 0-1.06a.754.754 0 0 0-1.06 0l-3 3c-.29.29-.29.77 0 1.06l3 3c.15.15.34.22.53.22s.38-.07.53-.22c.29-.29.29-.77 0-1.06l-1.72-1.72h5.19c.41 0 .75-.34.75-.75s-.34-.75-.75-.75Z"/>
						</svg>
					</button>
					<div class="back-button-text">Back</div>
				</div>
				<button data-type='icon' type='button' class='close-iframe'>
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none">
						<path fill="#DBDBC4" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10Z" opacity=".4"/>
						<path fill="#91190F" d="m13.06 12 2.3-2.3c.29-.29.29-.77 0-1.06a.754.754 0 0 0-1.06 0l-2.3 2.3-2.3-2.3a.754.754 0 0 0-1.06 0c-.29.29-.29.77 0 1.06l2.3 2.3-2.3 2.3c-.29.29-.29.77 0 1.06.15.15.34.22.53.22s.38-.07.53-.22l2.3-2.3 2.3 2.3c.15.15.34.22.53.22s.38-.07.53-.22c.29-.29.29-.77 0-1.06l-2.3-2.3Z"/>
					</svg>
					<span class='visually-hidden'>Close SmileIdentity Verification frame</span>
				</button>
			</div>
			<h1>
				Select contact method
			</h1>

			<form name='select-mode-form' novalidate style='--flow-space: 4.25rem' id='otp-entry' class='flow center'>
				<fieldset class='flow center'>
					<legend class='flow' style='--flow-space: 1.5rem'>
						<p>
							NIBSS, the data custodian of BVN,&nbsp;
							will send you a One-Time Password (OTP) 
						</p>

						<p>
							<small>
								The request will be from Chams Plc, who is NIBSS' technical partner.
							</small>
						</p>
					</legend>

					<div class='flow center'>
						${this.modes.length ? this.modes.map(
      (mode) => `<label class='input-radio'>
								<input type="radio" id="" name="mode" value="${Object.keys(mode)[0]}">
								<div class='otp-mode'>
									${Object.keys(mode)[0].includes("sms") ? `
										<svg xmlns="http://www.w3.org/2000/svg" width="29" height="37" fill="none">
											<path stroke="#2F718D" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16.697 24.12c4.914 0 7.37 0 8.897-1.652 1.527-1.651 1.527-4.31 1.527-9.625 0-5.316 0-7.974-1.527-9.625-1.526-1.651-3.983-1.651-8.897-1.651h-5.211c-4.914 0-7.37 0-8.897 1.651-1.527 1.651-1.527 4.31-1.527 9.625 0 5.316 0 7.974 1.527 9.625.85.92 1.991 1.328 3.685 1.508"/>
											<g filter="url(#sms)">
												<path stroke="#2F718D" stroke-linecap="round" stroke-width="2" d="M16.697 24.12c-1.61 0-3.384.703-5.005 1.613-2.602 1.462-3.903 2.193-4.545 1.727-.64-.465-.52-1.91-.277-4.799l.055-.656" shape-rendering="crispEdges"/>
											</g>
											<defs>
												<filter id="sms" width="20.023" height="15.595" x="1.675" y="21.005" color-interpolation-filters="sRGB" filterUnits="userSpaceOnUse">
													<feFlood flood-opacity="0" result="BackgroundImageFix"/>
													<feColorMatrix in="SourceAlpha" result="hardAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
													<feOffset dy="4"/>
													<feGaussianBlur stdDeviation="2"/>
													<feComposite in2="hardAlpha" operator="out"/>
													<feColorMatrix values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
													<feBlend in2="BackgroundImageFix" result="effect1_dropShadow_2_404"/>
													<feBlend in="SourceGraphic" in2="effect1_dropShadow_2_404" result="shape"/>
												</filter>
											</defs>
										</svg>
									` : `
										<svg xmlns="http://www.w3.org/2000/svg" width="35" height="24" fill="none">
											<path stroke="#2F718D" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.062 4.367c0-1.437 1.221-2.603 2.727-2.603h21.815c1.506 0 2.727 1.166 2.727 2.603v15.62c0 1.438-1.221 2.604-2.727 2.604H6.789c-1.506 0-2.727-1.166-2.727-2.604V4.367Z"/>
											<g filter="url(#message)">
												<path stroke="#2F718D" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m5.426 3.066 8.647 7.338c2.067 1.754 5.18 1.754 7.247 0l8.648-7.338" shape-rendering="crispEdges"/>
											</g>
											<defs>
												<filter id="message" width="34.042" height="18.154" x=".676" y="2.316" color-interpolation-filters="sRGB" filterUnits="userSpaceOnUse">
													<feFlood flood-opacity="0" result="BackgroundImageFix"/>
													<feColorMatrix in="SourceAlpha" result="hardAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
													<feOffset dy="4"/>
													<feGaussianBlur stdDeviation="2"/>
													<feComposite in2="hardAlpha" operator="out"/>
													<feColorMatrix values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
													<feBlend in2="BackgroundImageFix" result="effect1_dropShadow_2_394"/>
													<feBlend in="SourceGraphic" in2="effect1_dropShadow_2_394" result="shape"/>
												</filter>
											</defs>
										</svg>
									`}
									<div class='flow'>
										<p>
											${Object.values(mode)[0]}
										</p>
										<p>
											<small>
												An OTP will be sent by ${Object.keys(mode)[0].includes("sms") ? "sms" : "email"} to verify your identity
											</small>
										</p>
									</div>
								</div>
							</label>`
    ).join("\n") : "No modes yet"}
					</div>
				</fieldset>

				<button data-variant='ghost' id='contact-methods-outdated' style='--flow-space: .5rem' class='' type='button'>
					I am no longer using any of these options
				</button>

				<button data-variant='solid' id='select-otp-mode' type='submit'>
					<span class='text'>Continue</span>
					<svg aria-hidden='true' width="25" height="24" fill="none" xmlns="http://www.w3.org/2000/svg">
						<path d="M7 12h11m0 0-4.588-4M18 12l-4.588 4" stroke="#fff" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
					</svg>
					<span hidden class='spinner'></span>
				</button>
			</form>
		</div>

		<div hidden class='flow center' id='otp-verification'>
			<div class="nav justify-right">
				<button data-type='icon' type='button' class='close-iframe'>
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none">
						<path fill="#DBDBC4" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10Z" opacity=".4"/>
						<path fill="#91190F" d="m13.06 12 2.3-2.3c.29-.29.29-.77 0-1.06a.754.754 0 0 0-1.06 0l-2.3 2.3-2.3-2.3a.754.754 0 0 0-1.06 0c-.29.29-.29.77 0 1.06l2.3 2.3-2.3 2.3c-.29.29-.29.77 0 1.06.15.15.34.22.53.22s.38-.07.53-.22l2.3-2.3 2.3 2.3c.15.15.34.22.53.22s.38-.07.53-.22c.29-.29.29-.77 0-1.06l-2.3-2.3Z"/>
					</svg>
					<span class='visually-hidden'>Close SmileIdentity Verification frame</span>
				</button>
			</div>
			<h1>
				OTP Verification
			</h1>

			<div style='--flow-space: 4.25rem' id='otp-entry'>
				<form name='otp-submission-form' novalidate style='--flow-space: 1.5rem' class='flow center'>
					<label for='totp-token'>
						Enter the OTP sent to <span class='font-weight:bold'>${this.selectedOtpDeliveryMode}</span>
					</label>
					<input type='text' id='totp-token' maxlength='6' inputmode='numeric' autocomplete='one-time-code' />

					<p>
						Didn't receive the OTP${!this.selectedOtpDeliveryMode ? "?" : ` at <span class='font-weight:bold'>${this.selectedOtpDeliveryMode}</span>?`}
					</p>

					<button style='--flow-space: .5rem' data-variant='ghost' class='try-another-method' type='button'>
						Try another contact method
					</button>

					<button data-variant='solid' id='submit-otp' type='submit'>
						<span class='text'>Submit</span>
						<svg aria-hidden='true' width="25" height="24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<path d="M7 12h11m0 0-4.588-4M18 12l-4.588 4" stroke="#fff" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
						</svg>
						<span hidden class='spinner'></span>
					</button>
				</form>
			</div>
		</div>
	`;
  }
  var TotpConsent = class extends HTMLElement {
    constructor() {
      super();
      this.templateString = markup.bind(this);
      this.render = () => {
        return this.templateString();
      };
      this.attachShadow({ mode: "open" });
      this.modes = [];
      this["otp-delivery-mode"] = "";
      this.queryOtpModes = this.queryOtpModes.bind(this);
      this.selectOtpMode = this.selectOtpMode.bind(this);
      this.submitOtp = this.submitOtp.bind(this);
      this.switchContactMethod = this.switchContactMethod.bind(this);
      this.handleTotpConsentGrant = this.handleTotpConsentGrant.bind(this);
      this.handleTotpConsentContactMethodsOutdated = this.handleTotpConsentContactMethodsOutdated.bind(this);
      this.pages = [];
    }
    static get observedAttributes() {
      return ["modes", "otp-delivery-mode"];
    }
    attributeChangedCallback(name) {
      switch (name) {
        case "modes":
        case "otp-delivery-mode": {
          const updatedTemplate = document.createElement("template");
          updatedTemplate.innerHTML = this.render();
          const updatedNode = updatedTemplate.content.cloneNode(true).querySelector(`#${this.activeScreen.id}`);
          updatedNode.hidden = false;
          this.shadowRoot.replaceChild(updatedNode, this.activeScreen);
          this.setUpEventListeners();
          this.setActiveScreen(updatedNode);
          break;
        }
        default:
          break;
      }
    }
    setUpEventListeners() {
      this.idEntryScreen = this.shadowRoot.querySelector("#id-entry");
      this.selectModeScreen = this.shadowRoot.querySelector("#select-mode");
      this.otpVerificationScreen = this.shadowRoot.querySelector("#otp-verification");
      if (!this.activeScreen) {
        this.activeScreen = this.idEntryScreen;
      }
      this.queryOtpModesButton = this.idEntryScreen.querySelector("#query-otp-modes");
      this.backButton = this.idEntryScreen.querySelector("#back-button");
      this.selectOtpModeButton = this.selectModeScreen.querySelector("#select-otp-mode");
      this.entryBackbutton = this.selectModeScreen.querySelector(
        "#back-to-entry-button"
      );
      this.contactMethodsOutdatedButton = this.selectModeScreen.querySelector(
        "#contact-methods-outdated"
      );
      this.submitOtpButton = this.otpVerificationScreen.querySelector("#submit-otp");
      this.switchContactMethodButton = this.otpVerificationScreen.querySelector(
        ".try-another-method"
      );
      const CloseIframeButtons = this.shadowRoot.querySelectorAll(".close-iframe");
      this.idNumberInput = this.idEntryScreen.querySelector("#id_number");
      this.modeInputs = this.selectModeScreen.querySelectorAll('[name="mode"]');
      this.otpInput = this.otpVerificationScreen.querySelector("#totp-token");
      this.queryOtpModesButton.addEventListener(
        "click",
        (e) => this.queryOtpModes(e)
      );
      this.selectOtpModeButton.addEventListener(
        "click",
        (e) => this.selectOtpMode(e)
      );
      this.submitOtpButton.addEventListener("click", (e) => this.submitOtp(e));
      this.switchContactMethodButton.addEventListener(
        "click",
        (e) => this.switchContactMethod(e)
      );
      this.contactMethodsOutdatedButton.addEventListener(
        "click",
        (e) => this.handleTotpConsentContactMethodsOutdated(e)
      );
      this.entryBackbutton.addEventListener("click", () => {
        this.handleBackClick();
      });
      this.backButton.addEventListener("click", () => {
        this.handleBackClick();
      });
      CloseIframeButtons.forEach((button) => {
        button.addEventListener(
          "click",
          () => {
            this.closeWindow();
          },
          false
        );
      });
    }
    closeWindow() {
      const referenceWindow = window.parent;
      referenceWindow.postMessage("SmileIdentity::Close", "*");
    }
    handleBackClick() {
      const page = this.pages.pop();
      if (page) {
        this.setActiveScreen(page);
      } else {
        this.dispatchEvent(
          new CustomEvent("SmileIdentity::ConsentDenied::Back", {})
        );
      }
    }
    connectedCallback() {
      const template = document.createElement("template");
      template.innerHTML = this.render();
      this.shadowRoot.appendChild(template.content.cloneNode(true));
      this.setUpEventListeners();
    }
    switchContactMethod() {
      this.queryOtpModes();
    }
    resetForm() {
      const invalidElements = this.activeScreen.querySelectorAll("[aria-invalid]");
      invalidElements.forEach((el) => el.removeAttribute("aria-invalid"));
      const validationMessages = this.activeScreen.querySelectorAll(
        ".validation-message"
      );
      validationMessages.forEach((el) => el.remove());
    }
    handleIdNumberValidationErrors(errors) {
      const fields = Object.keys(errors);
      fields.forEach((field) => {
        const input = this.activeScreen.querySelector(`#${field}`);
        input.setAttribute("aria-invalid", "true");
        input.setAttribute("aria-describedby", `${field}-hint`);
        const errorDiv = document.createElement("div");
        errorDiv.setAttribute("id", `${field}-hint`);
        errorDiv.setAttribute("class", "validation-message");
        errorDiv.textContent = errors[field][0];
        input.insertAdjacentElement("afterend", errorDiv);
      });
    }
    handleActiveScreenErrors(error) {
      const submitButton = this.activeScreen.querySelector('[type="submit"]');
      const errorDiv = document.createElement("div");
      errorDiv.setAttribute("class", "validation-message");
      errorDiv.textContent = error;
      submitButton.insertAdjacentElement("beforebegin", errorDiv);
    }
    validateIdNumber(idNumber) {
      const validationConstraints = {
        id_number: {
          presence: {
            allowEmpty: false,
            message: "is required"
          },
          format: new RegExp(this.idRegex)
        }
      };
      const errors = (0, import_validate.default)({ id_number: idNumber }, validationConstraints);
      if (errors) {
        this.handleIdNumberValidationErrors(errors);
      }
      return errors;
    }
    async queryOtpModes(event) {
      if (event) {
        event.preventDefault();
        this.resetForm();
      }
      const validationErrors = this.validateIdNumber(this.idNumberInput.value);
      localStorage.setItem("idNumber", this.idNumberInput.value || this.idNumber);
      if (!validationErrors) {
        const data = {
          country: this.country,
          id_number: this.idNumber,
          id_type: this.idType,
          partner_id: this.partnerId,
          token: this.token
        };
        const url = `${this.baseUrl}/totp_consent`;
        try {
          this.toggleLoading();
          const response = await postData(url, data);
          const json = await response.json();
          this.toggleLoading();
          if (!response.ok) {
            this.handleActiveScreenErrors(json.error);
          } else {
            this.sessionId = json.session_id;
            this.modes = json.modes;
            this.setActiveScreen(this.selectModeScreen);
            this.setAttribute("modes", json.modes);
          }
        } catch (error) {
          this.toggleLoading();
          this.handleActiveScreenErrors(error.message);
        }
      }
    }
    async selectOtpMode(event) {
      event.preventDefault();
      this.resetForm();
      this.mode = Array.prototype.find.call(
        this.modeInputs,
        (node) => node.checked
      ).value;
      const data = {
        country: this.country,
        id_number: this.idNumber,
        id_type: this.idType,
        mode: this.mode,
        partner_id: this.partnerId,
        session_id: this.sessionId,
        token: this.token
      };
      const url = `${this.baseUrl}/totp_consent/mode`;
      try {
        this.toggleLoading();
        const response = await postData(url, data);
        const json = await response.json();
        this.toggleLoading();
        if (!response.ok) {
          this.handleActiveScreenErrors(json.error);
        } else {
          this.selectedOtpDeliveryMode = this.modes.filter(
            (mode) => mode[this.mode]
          )[0][this.mode];
          this.setActiveScreen(this.otpVerificationScreen);
          this.setAttribute("otp-delivery-mode", this.selectedOtpDeliveryMode);
        }
      } catch (error) {
        this.toggleLoading();
        this.handleActiveScreenErrors(error.message);
      }
    }
    async submitOtp(event) {
      event.preventDefault();
      this.resetForm();
      this.otp = this.otpInput.value;
      const data = {
        country: this.country,
        id_number: this.idNumber,
        id_type: this.idType,
        otp: this.otp,
        partner_id: this.partnerId,
        session_id: this.sessionId,
        token: this.token
      };
      const url = `${this.baseUrl}/totp_consent/otp`;
      try {
        this.toggleLoading();
        const response = await postData(url, data);
        const json = await response.json();
        this.toggleLoading();
        if (!response.ok) {
          this.handleActiveScreenErrors(json.error);
        } else {
          this.handleTotpConsentGrant(event);
        }
      } catch (error) {
        this.toggleLoading();
        this.handleActiveScreenErrors(error.message);
      }
    }
    toggleLoading() {
      const button = this.activeScreen.querySelector('button[type="submit"]');
      const text = button.querySelector(".text");
      const arrow = button.querySelector("svg");
      const spinner = button.querySelector(".spinner");
      button.toggleAttribute("disabled");
      text.toggleAttribute("hidden");
      arrow.toggleAttribute("hidden");
      spinner.toggleAttribute("hidden");
    }
    setActiveScreen(screen) {
      this.activeScreen.hidden = true;
      screen.hidden = false;
      this.activeScreen = screen;
    }
    get baseUrl() {
      return this.getAttribute("base-url");
    }
    get country() {
      return this.getAttribute("country");
    }
    get idHint() {
      return this.getAttribute("id-hint") || "Your BVN should be 11 digits long";
    }
    get idNumber() {
      return localStorage.getItem("idNumber");
    }
    get idRegex() {
      return this.getAttribute("id-regex");
    }
    get idType() {
      return this.getAttribute("id-type");
    }
    get idTypeLabel() {
      return this.getAttribute("id-type-label");
    }
    get partnerId() {
      return this.getAttribute("partner-id");
    }
    get partnerName() {
      return this.getAttribute("partner-name");
    }
    get token() {
      return this.getAttribute("token");
    }
    handleTotpConsentGrant() {
      const customEvent = new CustomEvent("SmileIdentity::ConsentGranted::TOTP", {
        detail: {
          id_number: this.idNumber,
          session_id: this.sessionId,
          consented: {
            personal_details: true,
            contact_information: true,
            document_information: true
          }
        }
      });
      this.dispatchEvent(customEvent);
    }
    handleTotpConsentContactMethodsOutdated() {
      const tag = "SmileIdentity::ConsentDenied::TOTP::ContactMethodsOutdated";
      const customEvent = new CustomEvent(tag, {
        detail: {
          message: tag,
          data: {
            id_number: this.idNumber,
            session_id: this.sessionId
          }
        }
      });
      this.dispatchEvent(customEvent);
    }
  };
  if ("customElements" in window) {
    window.customElements.define("totp-consent", TotpConsent);
  }

  // package.json
  var version = "v1.2.3";

  // src/js/ekyc.js
  (function eKYC() {
    "use strict";
    const endpoints = {
      development: "https://devapi.smileidentity.com/v1",
      sandbox: "https://testapi.smileidentity.com/v1",
      live: "https://api.smileidentity.com/v1",
      production: "https://api.smileidentity.com/v1"
    };
    const referenceWindow = window.parent;
    referenceWindow.postMessage("SmileIdentity::ChildPageReady", "*");
    const pages = [];
    let activeScreen;
    let config;
    let consent_information;
    let EndUserConsent2;
    let id_info;
    let partner_params;
    let ngBankCodes;
    let productConstraints;
    const LoadingScreen = document.querySelector("#loading-screen");
    const SelectIDType = document.querySelector("#select-id-type");
    const IDInfoForm = document.querySelector("#id-info");
    const CompleteScreen = document.querySelector("#complete-screen");
    let disableBackOnFirstScreen = false;
    const CloseIframeButtons = document.querySelectorAll(".close-iframe");
    function postData2(url = "", data = {}) {
      return fetch(url, {
        method: "POST",
        mode: "cors",
        cache: "no-cache",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });
    }
    async function getProductConstraints() {
      try {
        const productsConfigPayload = {
          partner_id: config.partner_details.partner_id,
          token: config.token,
          partner_params
        };
        const productsConfigUrl = `${endpoints[config.environment]}/products_config`;
        const productsConfigPromise = postData2(
          productsConfigUrl,
          productsConfigPayload
        );
        const servicesPromise = fetch(
          `${endpoints[config.environment]}/services`
        );
        const [productsConfigResponse, servicesResponse] = await Promise.all([
          productsConfigPromise,
          servicesPromise
        ]);
        if (productsConfigResponse.ok && servicesResponse.ok) {
          const partnerConstraints = await productsConfigResponse.json();
          const generalConstraints = await servicesResponse.json();
          ngBankCodes = generalConstraints.bank_codes;
          const previewBvnMfa = config.previewBVNMFA;
          if (previewBvnMfa) {
            generalConstraints.hosted_web.enhanced_kyc.NG.id_types.BVN_MFA = {
              id_number_regex: "^[0-9]{11}$",
              label: "Bank Verification Number (with OTP)",
              required_fields: [
                "country",
                "id_type",
                "session_id",
                "user_id",
                "job_id"
              ],
              test_data: "00000000000"
            };
          }
          return {
            partnerConstraints,
            generalConstraints: generalConstraints.hosted_web.enhanced_kyc
          };
        }
        throw new Error("Failed to get supported ID types");
      } catch (e) {
        throw new Error("Failed to get supported ID types", { cause: e });
      }
    }
    window.addEventListener(
      "message",
      async (event) => {
        if (event.data && event.data.includes("SmileIdentity::Configuration")) {
          config = JSON.parse(event.data);
          activeScreen = LoadingScreen;
          getPartnerParams();
          const { partnerConstraints, generalConstraints } = await getProductConstraints();
          productConstraints = generalConstraints;
          initializeSession(generalConstraints, partnerConstraints);
        }
      },
      false
    );
    function setInitialScreen(partnerConstraints) {
      const { country: selectedCountry, id_type: selectedIDType } = id_info;
      const selectedIdRequiresConsent = partnerConstraints.consentRequired[selectedCountry] ? partnerConstraints.consentRequired[selectedCountry].includes(
        selectedIDType
      ) : false;
      if (selectedIdRequiresConsent || config.consent_required || config.demo_mode) {
        const IDRequiresConsent = selectedIdRequiresConsent || config.consent_required && config.consent_required[selectedCountry] && config.consent_required[selectedCountry].includes(selectedIDType);
        if (IDRequiresConsent || config.demo_mode) {
          customizeConsentScreen();
          setActiveScreen(EndUserConsent2);
        } else {
          setActiveScreen(IDInfoForm);
        }
      } else {
        hideIdFromBackExit();
        setActiveScreen(IDInfoForm);
      }
      customizeForm();
    }
    function hideIdFromBackExit() {
      if (!disableBackOnFirstScreen)
        return;
      IDInfoForm.querySelector(".nav").classList.add("justify-right");
      IDInfoForm.querySelector(".back-wrapper").style.display = "none";
    }
    function initializeSession(generalConstraints, partnerConstraints) {
      const supportedCountries = Object.keys(generalConstraints).map((countryCode) => ({
        code: countryCode,
        name: generalConstraints[countryCode].name
      })).sort((a, b) => {
        if (a.name < b.name) {
          return -1;
        }
        if (a.name > b.name) {
          return 1;
        }
        return 0;
      }).map((item) => item.code);
      let validCountries = [];
      if (config.id_selection) {
        const selectedCountryList = Object.keys(config.id_selection);
        validCountries = supportedCountries.filter(
          (value) => selectedCountryList.includes(value)
        );
        if (validCountries.length === 1) {
          const selectedCountry = validCountries[0];
          id_info = {
            country: validCountries[0]
          };
          const idTypes = config.id_selection[selectedCountry];
          if (idTypes.length === 1 || typeof idTypes === "string") {
            id_info.id_type = Array.isArray(idTypes) ? idTypes[0] : idTypes;
            disableBackOnFirstScreen = true;
            setInitialScreen(partnerConstraints);
          }
        }
      } else {
        validCountries = Object.keys(partnerConstraints.idSelection.enhanced_kyc);
      }
      if (!id_info || !id_info.id_type) {
        const selectCountry = SelectIDType.querySelector("#country");
        const selectIDType = SelectIDType.querySelector("#id_type");
        const hostedWebConfigForm = document.querySelector(
          'form[name="hosted-web-config"]'
        );
        selectCountry.disabled = false;
        setActiveScreen(SelectIDType);
        const loadIdTypes = (countryCode) => {
          if (countryCode) {
            const validIDTypes = config.id_selection ? config.id_selection : partnerConstraints.idSelection.enhanced_kyc;
            const constrainedIDTypes = Object.keys(
              generalConstraints[countryCode].id_types
            );
            const selectedIDTypes = validIDTypes[countryCode].filter(
              (value) => constrainedIDTypes.includes(value)
            );
            selectIDType.innerHTML = "";
            const initialOption = document.createElement("option");
            initialOption.setAttribute("value", "");
            initialOption.textContent = "--Please Select--";
            selectIDType.appendChild(initialOption);
            selectedIDTypes.forEach((IDType) => {
              const option = document.createElement("option");
              option.setAttribute("value", IDType);
              option.textContent = generalConstraints[countryCode].id_types[IDType].label;
              selectIDType.appendChild(option);
            });
            selectIDType.disabled = false;
          } else {
            selectIDType.innerHTML = "";
            const option = document.createElement("option");
            option.disabled = true;
            option.setAttribute("value", "");
            option.textContent = "--Select Country First--";
            selectIDType.appendChild(option);
          }
        };
        selectCountry.addEventListener("change", (e) => {
          loadIdTypes(e.target.value);
        });
        validCountries.forEach((country) => {
          const countryObject = generalConstraints[country];
          if (countryObject) {
            const option = document.createElement("option");
            option.setAttribute("value", country);
            option.textContent = countryObject.name;
            if (id_info && id_info.country && country === id_info.country) {
              option.setAttribute("selected", true);
              selectCountry.value = country;
              selectCountry.disabled = true;
              loadIdTypes(country);
            }
            selectCountry.appendChild(option);
          }
        });
        hostedWebConfigForm.addEventListener("submit", (e) => {
          e.preventDefault();
          const selectedCountry = selectCountry.value;
          const selectedIDType = selectIDType.value;
          id_info = {
            country: selectedCountry,
            id_type: selectedIDType
          };
          setInitialScreen(partnerConstraints);
        });
      }
    }
    function initiateDemoMode() {
      const demoTips = document.querySelectorAll(".demo-tip");
      Array.prototype.forEach.call(demoTips, (tip) => {
        tip.hidden = false;
      });
      const script = document.createElement("script");
      script.type = "text/javascript";
      script.src = "js/demo-ekyc.min.js";
      document.body.appendChild(script);
    }
    IDInfoForm.querySelector("#submitForm").addEventListener(
      "click",
      (event) => {
        handleFormSubmit(event);
      },
      false
    );
    IDInfoForm.querySelector("#back-button").addEventListener(
      "click",
      (event) => {
        event.preventDefault();
        const page = pages.pop();
        setActiveScreen(page);
      },
      false
    );
    CloseIframeButtons.forEach((button) => {
      button.addEventListener(
        "click",
        () => {
          closeWindow(true);
        },
        false
      );
    });
    function customizeConsentScreen() {
      const partnerDetails = config.partner_details;
      const main = document.querySelector("main");
      EndUserConsent2 = document.querySelector("end-user-consent");
      if (EndUserConsent2) {
        main.removeChild(EndUserConsent2);
      }
      EndUserConsent2 = document.createElement("end-user-consent");
      EndUserConsent2.setAttribute(
        "base-url",
        endpoints[config.environment] || config.environment
      );
      EndUserConsent2.setAttribute("country", id_info.country);
      EndUserConsent2.setAttribute(
        "id-regex",
        productConstraints[id_info.country].id_types[id_info.id_type].id_number_regex
      );
      EndUserConsent2.setAttribute("id-type", id_info.id_type);
      EndUserConsent2.setAttribute(
        "id-type-label",
        productConstraints[id_info.country].id_types[id_info.id_type].label
      );
      EndUserConsent2.setAttribute("partner-id", partnerDetails.partner_id);
      EndUserConsent2.setAttribute("partner-name", partnerDetails.name);
      EndUserConsent2.setAttribute("partner-logo", partnerDetails.logo_url);
      EndUserConsent2.setAttribute("policy-url", partnerDetails.policy_url);
      EndUserConsent2.setAttribute("theme-color", partnerDetails.theme_color);
      EndUserConsent2.setAttribute("token", config.token);
      if (disableBackOnFirstScreen) {
        EndUserConsent2.setAttribute("hide-back-to-host", true);
      }
      if (config.demo_mode) {
        EndUserConsent2.setAttribute("demo-mode", config.demo_mode);
        localStorage.setItem(
          "SmileIdentityConstraints",
          JSON.stringify(productConstraints, null, 2)
        );
        initiateDemoMode();
      }
      EndUserConsent2.addEventListener(
        "SmileIdentity::Exit",
        () => {
          setActiveScreen(SelectIDType);
        },
        false
      );
      EndUserConsent2.addEventListener(
        "SmileIdentity::ConsentGranted",
        (event) => {
          consent_information = event.detail;
          if (consent_information.consented.personal_details) {
            id_info.consent_information = consent_information;
            setActiveScreen(IDInfoForm);
          }
        },
        false
      );
      EndUserConsent2.addEventListener(
        "SmileIdentity::ConsentGranted::TOTP",
        (event) => {
          consent_information = event.detail;
          if (consent_information.consented.personal_details) {
            id_info.id_number = consent_information.id_number;
            id_info.session_id = consent_information.session_id;
            id_info.consent_information = consent_information;
            handleFormSubmit();
          }
        },
        false
      );
      EndUserConsent2.addEventListener(
        "SmileIdentity::ConsentDenied",
        () => {
          referenceWindow.postMessage("SmileIdentity::ConsentDenied", "*");
          closeWindow();
        },
        false
      );
      EndUserConsent2.addEventListener(
        "SmileIdentity::ConsentDenied::TOTP::ContactMethodsOutdated",
        (event) => {
          referenceWindow.postMessage(event.detail, "*");
          closeWindow();
        },
        false
      );
      main.appendChild(EndUserConsent2);
    }
    function customizeForm() {
      setGuideTextForIDType();
      setFormInputs();
    }
    function setGuideTextForIDType() {
      const label = document.querySelector('[for="id_number"]');
      const input = document.querySelector("#id_number");
      label.innerHTML = productConstraints[id_info.country].id_types[id_info.id_type].label;
      input.setAttribute(
        "placeholder",
        productConstraints[id_info.country].id_types[id_info.id_type].test_data
      );
      input.setAttribute(
        "pattern",
        productConstraints[id_info.country].id_types[id_info.id_type].id_number_regex
      );
    }
    function loadBankCodes(bankCodes, placeholderElement) {
      const autocomplete = document.createElement("smileid-combobox");
      autocomplete.setAttribute("id", "bank_code");
      autocomplete.innerHTML = `
      <smileid-combobox-trigger
        label="Search Bank">
      </smileid-combobox-trigger>

      <smileid-combobox-listbox empty-label="No bank found">
        ${bankCodes.map(
        (bank) => `
                <smileid-combobox-option
                  value="${bank.code}"
                  label="${bank.name}"
                >
                  ${bank.name}
                </smileid-combobox-option>
              `
      ).join("\n")}
      </smileid-combobox-listbox>
    `;
      placeholderElement.replaceWith(autocomplete);
      autocomplete.addEventListener("change", (e) => {
        id_info.bank_code = e.detail ? e.detail.value : "";
      });
      return autocomplete;
    }
    function setFormInputs() {
      const requiredFields = productConstraints[id_info.country].id_types[id_info.id_type].required_fields;
      const showIdNumber = requiredFields.some(
        (fieldName) => fieldName.includes("id_number")
      );
      if (showIdNumber) {
        const IdNumber = IDInfoForm.querySelector("div#id-number");
        IdNumber.hidden = false;
      }
      const showNames = requiredFields.some(
        (fieldName) => fieldName.includes("name")
      );
      if (showNames) {
        const Names = IDInfoForm.querySelector("fieldset#names");
        Names.hidden = false;
      }
      const showDOB = requiredFields.some(
        (fieldName) => fieldName.includes("dob")
      );
      if (showDOB) {
        const DOB = IDInfoForm.querySelector("fieldset#dob");
        DOB.hidden = false;
      }
      const showCitizenship = requiredFields.some(
        (fieldName) => fieldName.includes("citizenship")
      );
      if (showCitizenship) {
        const Citizenship = IDInfoForm.querySelector("fieldset#citizenships");
        Citizenship.hidden = false;
      }
      const showBankCode = requiredFields.some(
        (fieldName) => fieldName.includes("bank_code")
      );
      if (showBankCode) {
        const BankCode = IDInfoForm.querySelector("fieldset#bank-code");
        loadBankCodes(ngBankCodes, BankCode.querySelector("#bank_code"));
        BankCode.hidden = false;
      }
    }
    function getPartnerParams() {
      function parseJWT(token) {
        const base64Url = token.split(".")[1];
        const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
        const jsonPayload = decodeURIComponent(
          atob(base64).split("").map(function(c) {
            return `%${c.charCodeAt(0).toString(16)}`;
          }).join("")
        );
        return JSON.parse(jsonPayload);
      }
      const { partner_params: partnerParams } = parseJWT(config.token);
      partner_params = { ...partnerParams, ...config.partner_params || {} };
    }
    function setActiveScreen(node) {
      activeScreen.hidden = true;
      node.hidden = false;
      pages.push(activeScreen);
      activeScreen = node;
    }
    function resetForm() {
      const invalidElements = IDInfoForm.querySelectorAll("[aria-invalid]");
      invalidElements.forEach((el) => el.removeAttribute("aria-invalid"));
      const validationMessages = document.querySelectorAll(".validation-message");
      validationMessages.forEach((el) => el.remove());
    }
    function validateInputs(payload) {
      const validationConstraints = {};
      const requiredFields = productConstraints[id_info.country].id_types[id_info.id_type].required_fields;
      const showIdNumber = requiredFields.some(
        (fieldName) => fieldName.includes("id_number")
      );
      if (showIdNumber) {
        validationConstraints.id_number = {
          presence: {
            allowEmpty: false,
            message: "is required"
          },
          format: new RegExp(
            productConstraints[id_info.country].id_types[id_info.id_type].id_number_regex
          )
        };
      }
      const showNames = requiredFields.some(
        (fieldName) => fieldName.includes("name")
      );
      if (showNames) {
        validationConstraints.first_name = {
          presence: {
            allowEmpty: false,
            message: "is required"
          }
        };
        validationConstraints.last_name = {
          presence: {
            allowEmpty: false,
            message: "is required"
          }
        };
      }
      const showDOB = requiredFields.some(
        (fieldName) => fieldName.includes("dob")
      );
      if (showDOB) {
        validationConstraints.day = {
          presence: {
            allowEmpty: false,
            message: "is required"
          }
        };
        validationConstraints.month = {
          presence: {
            allowEmpty: false,
            message: "is required"
          }
        };
        validationConstraints.year = {
          presence: {
            allowEmpty: false,
            message: "is required"
          }
        };
      }
      const showCitizenship = requiredFields.some(
        (fieldName) => fieldName.includes("citizenship")
      );
      if (showCitizenship) {
        validationConstraints.citizenship = {
          presence: {
            allowEmpty: false,
            message: "is required"
          }
        };
      }
      const showBankCode = requiredFields.some(
        (fieldName) => fieldName.includes("bank_code")
      );
      if (showBankCode) {
        validationConstraints.bank_code = {
          presence: {
            allowEmpty: false,
            message: "is required"
          }
        };
      }
      const validation = (0, import_validate2.default)(payload, validationConstraints);
      if (validation) {
        handleValidationErrors(validation);
        const submitButton = IDInfoForm.querySelector('[type="button"]');
        submitButton.removeAttribute("disabled");
      }
      return validation;
    }
    function handleValidationErrors(errors) {
      const fields = Object.keys(errors);
      fields.forEach((field) => {
        const input = IDInfoForm.querySelector(`#${field}`);
        input.setAttribute("aria-invalid", "true");
        input.setAttribute("aria-describedby", `${field}-hint`);
        const errorDiv = document.createElement("div");
        errorDiv.setAttribute("id", `${field}-hint`);
        errorDiv.setAttribute("class", "validation-message");
        errorDiv.textContent = errors[field][0];
        input.insertAdjacentElement("afterend", errorDiv);
      });
    }
    async function handleFormSubmit(event) {
      if (event) {
        event.preventDefault();
        resetForm();
      }
      const form = IDInfoForm.querySelector("form");
      const formData = new FormData(form);
      const payload = { ...id_info, ...Object.fromEntries(formData.entries()) };
      const isInvalid = validateInputs(payload);
      if (isInvalid) {
        return;
      }
      id_info = {
        dob: `${payload.year}-${payload.month}-${payload.day}`,
        entered: true,
        ...payload,
        ...id_info
      };
      try {
        if (event && event.target)
          event.target.disabled = true;
        await submitIdInfoForm();
        if (event && event.target)
          event.target.disabled = false;
        complete();
      } catch (error) {
        if (event && event.target)
          event.target.disabled = false;
        displayErrorMessage("Something went wrong");
        console.error(
          `SmileIdentity - ${error.name || error.message}: ${error.cause}`
        );
      }
    }
    function displayErrorMessage(message) {
      const p = document.createElement("p");
      p.textContent = message;
      p.classList.add("validation-message");
      p.style.fontSize = "1.5rem";
      p.style.textAlign = "center";
      const main = document.querySelector("main");
      main.prepend(p);
    }
    async function submitIdInfoForm() {
      const { year, month, day, ...data } = id_info;
      const dob = year && month && day ? `${year}-${month}-${day}` : void 0;
      const {
        callback_url,
        token,
        partner_details: { partner_id }
      } = config;
      const payload = {
        ...data,
        dob,
        partner_id,
        callback_url,
        token,
        source_sdk: config.sdk || "hosted_web",
        source_sdk_version: config.sdk_version || version,
        partner_params: {
          ...partner_params,
          job_type: 5
        }
      };
      const URL = `${endpoints[config.environment]}/async_id_verification`;
      const response = await postData2(URL, payload);
      const json = await response.json();
      if (json.error)
        throw new Error(json.error);
    }
    function complete() {
      const countryName = productConstraints[id_info.country].name;
      const idTypeName = productConstraints[id_info.country].id_types[id_info.id_type].label;
      const thankYouMessage = CompleteScreen.querySelector("#thank-you-message");
      thankYouMessage.textContent = `We will process your ${countryName} - ${idTypeName} information to verify your identity`;
      setActiveScreen(CompleteScreen);
      handleSuccess();
      window.setTimeout(closeWindow, 2e3);
    }
    function closeWindow(userTriggered) {
      const message = userTriggered ? "SmileIdentity::Close" : "SmileIdentity::Close::System";
      referenceWindow.postMessage(message, "*");
    }
    function handleSuccess() {
      referenceWindow.postMessage("SmileIdentity::Success", "*");
    }
  })();
})();
/*! Bundled license information:

validate.js/validate.js:
  (*!
   * validate.js 0.13.1
   *
   * (c) 2013-2019 Nicklas Ansman, 2013 Wrapp
   * Validate.js may be freely distributed under the MIT license.
   * For all details and documentation:
   * http://validatejs.org/
   *)
*/
